<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://joelstrouts.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://joelstrouts.com/" rel="alternate" type="text/html" /><updated>2019-07-19T12:44:17+01:00</updated><id>https://joelstrouts.com/</id><title type="html">Joel Strouts</title><subtitle>My personal website.
</subtitle><author><name>Joel Strouts</name></author><entry><title type="html">Working in Hong Kong (Part 2)</title><link href="https://joelstrouts.com/2019/07/10/Working-in-Hong-Kong-Part-2.html" rel="alternate" type="text/html" title="Working in Hong Kong (Part 2)" /><published>2019-07-10T00:00:00+01:00</published><updated>2019-07-10T00:00:00+01:00</updated><id>https://joelstrouts.com/2019/07/10/Working-in-Hong-Kong-Part-2</id><content type="html" xml:base="https://joelstrouts.com/2019/07/10/Working-in-Hong-Kong-Part-2.html">&lt;h1 id=&quot;changing-tack&quot;&gt;Changing Tack&lt;/h1&gt;

&lt;p class=&quot;info&quot;&gt;&lt;img src=&quot;/images/beating-windwards.png&quot; alt=&quot;Beating to Windward&quot; /&gt;
Sailing is the art of manoeuvring a vessel to exploit the power of the wind. It is somewhat surprising, and entirely lovely, that this is still possible even when your destination demands that you head directly into the oncoming wind. The wind can be tamed even when it insists on pushing you backwards. Tacking is the name for the type of turn you must perform in order defy the wind’s wishes.&lt;/p&gt;

&lt;p&gt;In this post I describe the work I’m doing while I’m here. &lt;a href=&quot;joelstrouts.com/2019/07/08/Working-in-Hong-Kong-Part-1.html&quot;&gt;The last one&lt;/a&gt; explained how I got here and, in doing so, described the project I proposed in order to secure the opportunity. If I was working on that same project, an entire additional post to explain what I’m up to would be a bit redundant, so naturally - that’s not actually what I’m doing.&lt;/p&gt;

&lt;h2 id=&quot;my-options&quot;&gt;My Options&lt;/h2&gt;

&lt;p&gt;Here’s what happened: First contact with Professor Wang resulted in us scheduling a skype call to talk about the idea of working together - I was supposed to explain my project and describe the expectations I had of the experience. I was quite nervous, but I happily obliged and after ten minutes or so of discussion Professor Wang graciously informed me that my idea was fun, but not of real research interest, then without skipping a beat began to discuss a different problem he had been contemplating. I was blindsided! But the new problem we were discussing was very interesting. Let me try to explain it.&lt;/p&gt;

&lt;p&gt;The problem was to do with fractals. The exact definition of a fractal is a bit fussier than the common usage definition (it is more about a sort of scale-independent roughness). In this article we apply the more common definition: A structure is said to be fractal if it exhibits the property of self similarity.&lt;/p&gt;

&lt;h3 id=&quot;a-brief-discussion-of-fractals&quot;&gt;A Brief Discussion of Fractals&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/barnsley-fern.png&quot; alt=&quot;Barnsley Fern&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pictured above is one of the most well known fractals; the Barnsley Fern. Each individual frond looks like a smaller version of the whole thing, this is what we call self similar. Fractals can be dizzyingly complex, but because they follow a pattern, can be described in surprisingly compact ways. Compact representation, complex realisation. That’s a desirable combination. If you were dealing with a very complex, incredibly detailed problem, and you realised that actually there was an underlying fractal pattern to it, you would be liberated from worrying about all the fine details. Then you could just reason about the general pattern, since the behaviour would be the same at every level.&lt;/p&gt;

&lt;p class=&quot;info&quot;&gt;&lt;strong&gt;Two examples:&lt;/strong&gt; I learned yesterday that some image compression algorithms work by identifying areas which can be described by fractals, because doing so simplifies the representation so much. Also, many games use fractal rules to generate elements of the environment, like mountain ranges, foliage etc. for the same reason.&lt;/p&gt;

&lt;p&gt;The fern pictured above can be generated by the repeated application of these rules:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\bbox[20px, border: 2px solid orange]{
\begin{align}
f_{1}(x,y)=\begin{bmatrix}0.00 &amp; 0.00\\0.00 &amp; 0.16\end{bmatrix}\phantom{-}&amp;\begin{bmatrix}x\\y\end{bmatrix} \\
f_{2}(x,y)=\begin{bmatrix}0.85 &amp; 0.04\\-0.04 &amp; 0.85\end{bmatrix}&amp;\begin{bmatrix}x\\y\end{bmatrix} + \begin{bmatrix}0,00\\1.60\end{bmatrix} \\
f_{3}(x,y)=\begin{bmatrix}0.00 &amp; 0.00\\0.00 &amp; 0.16\end{bmatrix}\phantom{-}&amp;\begin{bmatrix}x\\y\end{bmatrix} + \begin{bmatrix}0,00\\1.60\end{bmatrix} \\
f_{4}(x,y)=\begin{bmatrix}0.00 &amp; 0.00\\0.00 &amp; 0.16\end{bmatrix}\phantom{-}&amp;\begin{bmatrix}x\\y\end{bmatrix} + \begin{bmatrix}0,00\\0.44\end{bmatrix}
\end{align}
} %]]&gt;&lt;/script&gt;

&lt;p&gt;Where each function is what we call an &lt;a href=&quot;https://www.wikipedia.org/wiki/Affine_transformation&quot;&gt;&lt;em&gt;affine translation&lt;/em&gt;&lt;/a&gt;, meaning they can be described by a combination of a linear transformation and a translation. Affine transformations let you shift and stretch your input in many ways, only dissalowing changes which would cause straight lines to become curved.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fern-affines.png&quot; alt=&quot;Affine transformations generating the barnsley fern&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here you can see visually what those four affine transformations (that were provided in mathematical notation) really describe. Varying the coefficients that define these transformation can produce other fern like outputs and other forms, sometimes natural - often more abstract, too. A gallery of images produced in this way can be found &lt;a href=&quot;http://paulbourke.net/fractals/ifs/&quot;&gt;here&lt;/a&gt;. One such example is shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sand-dollar-IFS.jpg&quot; alt=&quot;Sand Dollar Fractal&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-suggestion&quot;&gt;The Suggestion&lt;/h3&gt;

&lt;p&gt;The problem was this: Rather than choosing affine transformations then seeing what image results, is it possible to reverse engineer what the transformations must have been just from the resulting image?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
  subgraph Not the problem
    a1[Function Defintions]--&amp;gt;a2[Picture of Fractal]
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph RL
  subgraph The problem
    b2[Picture of Fractal]--&amp;gt;b1[Function Defintions]
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More specifically the question was: can you write a program that would automate this process? Write a program capable of reproducing input images with great accuracy when they contain fractal patterns.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
  subgraph What a solution would look like
    A[Input Image]--&amp;gt;B[Computer program]
    B--&amp;gt;C[Reproduction of input image]
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That was pretty much the suggestion. I was not downtrodden that the Professor had expressed his disinterest in working on my original suggestion because he criticisms were reasonable (It is more of an exercise in pedagogy and design than a mathematics/ computer science research) and because I was flattered that despite this he was still interested in working with me and immediately suggested an interesting project that was accessible and relevant to me.&lt;/p&gt;

&lt;h3 id=&quot;the-dilemma--the-conclusion&quot;&gt;The Dilemma / The Conclusion&lt;/h3&gt;

&lt;p&gt;What about my original project? I secured my place on the scholarship program, at least superficially, for the express purpose of realising that idea. So although the prospect on working with Professor Wang at HKU was very exciting, it was not clear that it was the best thing to do. I asked Professor Wang if it would be possible to comprimise and instead divide the time available evenly between work on my own project and on the problem he suggested. He responded that this was in theory possible but not optimal because he would not be able to contribute as much to my project so my being there would be of less use. Very understandable objection! I talked to the scholarship team in York and in the end we decided it was best to take the original offer. The scholarship is actually more about personal development than specific project outcomes. The opportunities to learn and grow as a person by taking this chance far outweighed what was offered by my other options. It still feels a bit wrong to have abandoned my project like that though, so, I have not shelved it completely. I’d like to frame what’s happening as more of a beating to windward sort of situation - and in the end my project will be the better for it.&lt;/p&gt;

&lt;h2 id=&quot;the-plan&quot;&gt;The Plan&lt;/h2&gt;

&lt;p&gt;So, that is why I am here and that is what I will be working on. Although  is not absolutely required that &lt;strong&gt;this&lt;/strong&gt; is the problem we work the whole time; perhaps if we reach a dead end, find something more interesting, or perhaps even solve the problem to our satisfaction, then we will work on something else. Nevertheless, right now the plan is just to tackle this problem with maximum vitality and then reassess the situation as necessary.&lt;/p&gt;

&lt;h3 id=&quot;conceptual-level&quot;&gt;Conceptual level&lt;/h3&gt;

&lt;p&gt;So, my first thought on seeing the problem was that it was really composed of two separate sub-problems. First, ‘&lt;em&gt;feature extraction&lt;/em&gt;’. There is a natural sense that we have, as humans, upon seeing an image - ‘oh it has this pattern’ or, ‘oh, it has that pattern’. When we see a picture of the fern we are immediately aware that the form has structure, and if asked we could describe that structure ‘this frond is like that frond, this stem like the other’.  We have an intuition about it. This is not so obvious to a computer. Let’s say you have identified which parts look like copies of larger parts though, what’s left to do is figure out how to encode that information as a set of transformations. This is what I saw:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
  A[Input image]--&amp;gt;b1[feature extraction]
  subgraph The program
    b1--&amp;gt;b2[transformation inference]
  end
  b2--&amp;gt;C[Reproduced input image]
  b1-.-d1(very difficult?)
  b2-.-d2(not so difficult?)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have talked to Professor Wang and he agrees that this is a natural way of dividing up the problem, and that it would be wise to begin with that second sub-problem. To begin with the feature identification process can be performed by the user of the program interactively.&lt;/p&gt;

&lt;h3 id=&quot;practical-level&quot;&gt;Practical Level&lt;/h3&gt;

&lt;p&gt;I have had a lot of problems choosing the wrong technology in the past. I think I’ve been too ambitious - trying to optimise for learning potential not just practicality, so choosing something slightly too unfamiliar or demanding, or perhaps with poor support. This time I will try to avoid making the same mistake. Practically, that means I will try:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Using javascript because I’m more familiar with it,&lt;/li&gt;
  &lt;li&gt;Using python because it’s well supported&lt;/li&gt;
  &lt;li&gt;Using libraries where possible so I don’t keep trying to re-invent the wheel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, my focus right away will just to get something, anything, up and running as quickly as possible as I have often been guilty of analysis paralysis. Soon (by the start of next week?), I hope to be able to embed a barnsley fern that I have generated myself, ideally in an interactive format.&lt;/p&gt;

&lt;h2 id=&quot;obstacles&quot;&gt;Obstacles&lt;/h2&gt;

&lt;p&gt;Generally, thinking of the project as a whole, I see many obstacles. Especially in the second part. For now I’ll focus on the near term.&lt;/p&gt;

&lt;p&gt;My primary practical concern was, initially, technology. I had talked to the Professor about what technology he would use to implement a demo of a program like this and he suggested $\texttt{c++}$. I have never used $\texttt{c++}$ before so that did worry me a bit. Researching this approach showed me that it would likely involve learning about a graphics library like &lt;a href=&quot;https://en.m.wikipedia.org/wiki/OpenGL&quot;&gt;OpenGL&lt;/a&gt;, which in turn meant learning about graphics pipelines, with shaders and tesselaters, and rasterization. I still want to learn those things but I now see them as secondary to my real target, and perhaps even distractions if I focus on them.&lt;/p&gt;

&lt;p&gt;Other than that, I think that the applicability of this approach (entirely affine transformations based) concerns me somewhat. Yes, you can generate many fern like structures this way, even in three dimensions (resulting in a form like a &lt;a href=&quot;https://en.m.wikipedia.org/wiki/Romanesco_broccoli&quot;&gt;Romanesco cauliflower&lt;/a&gt; but these forms are almost &lt;em&gt;too&lt;/em&gt; regular, and I think do not really capture the full breadth of self similar structures.&lt;/p&gt;

&lt;p&gt;I must say though, once my short term goal was clear (write a simple program in any language which will generate Bernsley-Fern type fractals and allow you to vary the underlying affine transformations), I felt less bothered by the potential difficulties down the road. First, this - then that.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I need to get on with it! Tomorrow I begin.&lt;/p&gt;</content><author><name>Joel Strouts</name></author><summary type="html">Changing Tack Sailing is the art of manoeuvring a vessel to exploit the power of the wind. It is somewhat surprising, and entirely lovely, that this is still possible even when your destination demands that you head directly into the oncoming wind. The wind can be tamed even when it insists on pushing you backwards. Tacking is the name for the type of turn you must perform in order defy the wind’s wishes. In this post I describe the work I’m doing while I’m here. The last one explained how I got here and, in doing so, described the project I proposed in order to secure the opportunity. If I was working on that same project, an entire additional post to explain what I’m up to would be a bit redundant, so naturally - that’s not actually what I’m doing. My Options Here’s what happened: First contact with Professor Wang resulted in us scheduling a skype call to talk about the idea of working together - I was supposed to explain my project and describe the expectations I had of the experience. I was quite nervous, but I happily obliged and after ten minutes or so of discussion Professor Wang graciously informed me that my idea was fun, but not of real research interest, then without skipping a beat began to discuss a different problem he had been contemplating. I was blindsided! But the new problem we were discussing was very interesting. Let me try to explain it. The problem was to do with fractals. The exact definition of a fractal is a bit fussier than the common usage definition (it is more about a sort of scale-independent roughness). In this article we apply the more common definition: A structure is said to be fractal if it exhibits the property of self similarity. A Brief Discussion of Fractals Pictured above is one of the most well known fractals; the Barnsley Fern. Each individual frond looks like a smaller version of the whole thing, this is what we call self similar. Fractals can be dizzyingly complex, but because they follow a pattern, can be described in surprisingly compact ways. Compact representation, complex realisation. That’s a desirable combination. If you were dealing with a very complex, incredibly detailed problem, and you realised that actually there was an underlying fractal pattern to it, you would be liberated from worrying about all the fine details. Then you could just reason about the general pattern, since the behaviour would be the same at every level. Two examples: I learned yesterday that some image compression algorithms work by identifying areas which can be described by fractals, because doing so simplifies the representation so much. Also, many games use fractal rules to generate elements of the environment, like mountain ranges, foliage etc. for the same reason. The fern pictured above can be generated by the repeated application of these rules: Where each function is what we call an affine translation, meaning they can be described by a combination of a linear transformation and a translation. Affine transformations let you shift and stretch your input in many ways, only dissalowing changes which would cause straight lines to become curved. Here you can see visually what those four affine transformations (that were provided in mathematical notation) really describe. Varying the coefficients that define these transformation can produce other fern like outputs and other forms, sometimes natural - often more abstract, too. A gallery of images produced in this way can be found here. One such example is shown below. The Suggestion The problem was this: Rather than choosing affine transformations then seeing what image results, is it possible to reverse engineer what the transformations must have been just from the resulting image? graph LR subgraph Not the problem a1[Function Defintions]--&amp;gt;a2[Picture of Fractal] end graph RL subgraph The problem b2[Picture of Fractal]--&amp;gt;b1[Function Defintions] end More specifically the question was: can you write a program that would automate this process? Write a program capable of reproducing input images with great accuracy when they contain fractal patterns. graph LR subgraph What a solution would look like A[Input Image]--&amp;gt;B[Computer program] B--&amp;gt;C[Reproduction of input image] end That was pretty much the suggestion. I was not downtrodden that the Professor had expressed his disinterest in working on my original suggestion because he criticisms were reasonable (It is more of an exercise in pedagogy and design than a mathematics/ computer science research) and because I was flattered that despite this he was still interested in working with me and immediately suggested an interesting project that was accessible and relevant to me. The Dilemma / The Conclusion What about my original project? I secured my place on the scholarship program, at least superficially, for the express purpose of realising that idea. So although the prospect on working with Professor Wang at HKU was very exciting, it was not clear that it was the best thing to do. I asked Professor Wang if it would be possible to comprimise and instead divide the time available evenly between work on my own project and on the problem he suggested. He responded that this was in theory possible but not optimal because he would not be able to contribute as much to my project so my being there would be of less use. Very understandable objection! I talked to the scholarship team in York and in the end we decided it was best to take the original offer. The scholarship is actually more about personal development than specific project outcomes. The opportunities to learn and grow as a person by taking this chance far outweighed what was offered by my other options. It still feels a bit wrong to have abandoned my project like that though, so, I have not shelved it completely. I’d like to frame what’s happening as more of a beating to windward sort of situation - and in the end my project will be the better for it. The Plan So, that is why I am here and that is what I will be working on. Although is not absolutely required that this is the problem we work the whole time; perhaps if we reach a dead end, find something more interesting, or perhaps even solve the problem to our satisfaction, then we will work on something else. Nevertheless, right now the plan is just to tackle this problem with maximum vitality and then reassess the situation as necessary. Conceptual level So, my first thought on seeing the problem was that it was really composed of two separate sub-problems. First, ‘feature extraction’. There is a natural sense that we have, as humans, upon seeing an image - ‘oh it has this pattern’ or, ‘oh, it has that pattern’. When we see a picture of the fern we are immediately aware that the form has structure, and if asked we could describe that structure ‘this frond is like that frond, this stem like the other’. We have an intuition about it. This is not so obvious to a computer. Let’s say you have identified which parts look like copies of larger parts though, what’s left to do is figure out how to encode that information as a set of transformations. This is what I saw: graph LR A[Input image]--&amp;gt;b1[feature extraction] subgraph The program b1--&amp;gt;b2[transformation inference] end b2--&amp;gt;C[Reproduced input image] b1-.-d1(very difficult?) b2-.-d2(not so difficult?) I have talked to Professor Wang and he agrees that this is a natural way of dividing up the problem, and that it would be wise to begin with that second sub-problem. To begin with the feature identification process can be performed by the user of the program interactively. Practical Level I have had a lot of problems choosing the wrong technology in the past. I think I’ve been too ambitious - trying to optimise for learning potential not just practicality, so choosing something slightly too unfamiliar or demanding, or perhaps with poor support. This time I will try to avoid making the same mistake. Practically, that means I will try: Using javascript because I’m more familiar with it, Using python because it’s well supported Using libraries where possible so I don’t keep trying to re-invent the wheel Additionally, my focus right away will just to get something, anything, up and running as quickly as possible as I have often been guilty of analysis paralysis. Soon (by the start of next week?), I hope to be able to embed a barnsley fern that I have generated myself, ideally in an interactive format. Obstacles Generally, thinking of the project as a whole, I see many obstacles. Especially in the second part. For now I’ll focus on the near term. My primary practical concern was, initially, technology. I had talked to the Professor about what technology he would use to implement a demo of a program like this and he suggested $\texttt{c++}$. I have never used $\texttt{c++}$ before so that did worry me a bit. Researching this approach showed me that it would likely involve learning about a graphics library like OpenGL, which in turn meant learning about graphics pipelines, with shaders and tesselaters, and rasterization. I still want to learn those things but I now see them as secondary to my real target, and perhaps even distractions if I focus on them. Other than that, I think that the applicability of this approach (entirely affine transformations based) concerns me somewhat. Yes, you can generate many fern like structures this way, even in three dimensions (resulting in a form like a Romanesco cauliflower but these forms are almost too regular, and I think do not really capture the full breadth of self similar structures. I must say though, once my short term goal was clear (write a simple program in any language which will generate Bernsley-Fern type fractals and allow you to vary the underlying affine transformations), I felt less bothered by the potential difficulties down the road. First, this - then that. Conclusion I need to get on with it! Tomorrow I begin.</summary></entry><entry><title type="html">Working in Hong Kong (Part 1)</title><link href="https://joelstrouts.com/2019/07/08/Working-in-Hong-Kong-Part-1.html" rel="alternate" type="text/html" title="Working in Hong Kong (Part 1)" /><published>2019-07-08T00:00:00+01:00</published><updated>2019-07-08T00:00:00+01:00</updated><id>https://joelstrouts.com/2019/07/08/Working-in-Hong-Kong-Part-1</id><content type="html" xml:base="https://joelstrouts.com/2019/07/08/Working-in-Hong-Kong-Part-1.html">&lt;p&gt;For the next two months I am working in Hong Kong. While I’m here I think it would be helpful to document my time and the work I’m doing. So that those posts are not completely without context, I will take the next two posts to explain: First - Who I am and how I got here, and second - a proper exposition of the problem I will (at least initially) be working on while I’m here.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;who-am-i&quot;&gt;Who Am I?&lt;/h1&gt;

&lt;p&gt;I’m a maths student (just finished my second year) at &lt;a href=&quot;https://www.york.ac.uk&quot;&gt;York University&lt;/a&gt;. In my first year I was intent on lining up something interesting to do in the summer break, so I talked to my supervisor and he recommended looking into a programme called the Laidlaw scholarship. The purpose of the program was broadly to encourage undergraduate research. Open to all students with at least two years of their degree left before graduation. This was the deal:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Suggest a project of your own devising, complete with research plan and personal statement&lt;/li&gt;
  &lt;li&gt;If shortlisted then you would also be subjected to a logical reasoning test and interview process&lt;/li&gt;
  &lt;li&gt;Selected applicants would receive funding to complete whichever project they put forward in their application, and also be enrolled in a leadership development program.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I knew exactly what I would have &lt;em&gt;liked&lt;/em&gt; to work on as a scholarship beneficiary - but I didn’t fancy my chances getting it.&lt;/p&gt;

&lt;h2 id=&quot;laidlaw-the-dream-project&quot;&gt;Laidlaw: The Dream Project&lt;/h2&gt;

&lt;p&gt;There are two little projects I worked on long ago that I never dislodged from my mind and ended up becoming entangled with one another. The story of those two mini projects together tell the story of this bigger project I am now in the middle of. First: learning to code.&lt;/p&gt;

&lt;h3 id=&quot;division-problems&quot;&gt;Division problems&lt;/h3&gt;
&lt;p&gt;I was adamant (to the detriment of my actual exam grades at the time) - I &lt;em&gt;would&lt;/em&gt; learn to program. I had tried working through some courses on &lt;a href=&quot;https://codeacademy.com&quot;&gt;codeacademy&lt;/a&gt; but nothing really stuck, in the end what worked for me was playing around with making my own web-pages/websites&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. To would google ‘simple programming projects’ and complete anything I could. There was one project, simple remit, that really intrigued me. The task was simply to create a web page with two elements: an input box, and a submit button. When you typed a number into the box and hit submit, the idea was that the webpage would then display one of two different responses:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Your number WAS a multiple of 6 :)”, or:&lt;/li&gt;
  &lt;li&gt;“Your number WAS NOT a multiple of 6 :(“&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sure, not particularly interesting, but good coding practice I thought. Once I got it working I didn’t move on right away but instead tried some variations on the core idea. First: Why six? It could have been any number, so I made the divisor a variable and played around with different values. Once It could handle any divisor I tried the idea of doing two divisibility checks at once - now the program showed two lines when you submitted your number: &lt;em&gt;Is your number a multiple of 6?&lt;/em&gt; AND &lt;em&gt;Is your number a multiple of 4?&lt;/em&gt;. It was still pretty boring. I tried instead not one, not two, but a bunch. At that point it became a bit more interesting.&lt;/p&gt;

&lt;p&gt;The output looked like a 20 item checklist. As you cycled through inputs, the lines of text would perform a little dance as the divisors flicked on and off. There was a pleasing sort of pattern to it, the second line oscillating on and off with every next number, the third similar but instead going: on, off, off, on, off off. All of them related but not quite in sync. You could gleam something deeper was going on, but still, all of this information was being displayed in such a quaint way: lines of text of different length either affirming divisibility or stating lack thereof. Surely, &lt;em&gt;surely&lt;/em&gt;, this should be represented graphically? Just literal check boxes would be superior to these verbose textual descriptions. The problem was: although I could picture in my mind what this far superior graphical replacement would look like, my programming abilities at the time were prohibitive of such an endeavour.&lt;/p&gt;

&lt;h4 id=&quot;enter-a-whole-number&quot;&gt;Enter a whole number&lt;/h4&gt;
&lt;script&gt;
  function check_for_submit(e) {
    if (e.keyCode == 13) {
      check_divisibility();
      return false;
    } else if (e.keyCode == 38) {
      increase_and_submit();
      return false;
    } else if (e.keyCode == 40) {
      decrease_and_submit();
      return false;
    } else {
      return true;
    }
  }
&lt;/script&gt;

&lt;p&gt;&lt;input id=&quot;division_number&quot; type=&quot;number&quot; onkeydown=&quot;return check_for_submit(event)&quot; onkeypress=&quot;return check_for_submit(event)&quot; /&gt;
&lt;input id=&quot;division_submit&quot; value=&quot;submit&quot; type=&quot;submit&quot; /&gt;
&lt;br /&gt;
&lt;input id=&quot;increase_button&quot; type=&quot;button&quot; value=&quot;increase&quot; /&gt;
&lt;input id=&quot;decrease_button&quot; type=&quot;button&quot; value=&quot;decrease&quot; /&gt;&lt;/p&gt;
&lt;div id=&quot;output_div&quot;&gt;&lt;/div&gt;

&lt;script&gt;
  let check_divisibility = function check_divisibility() {
    let number = document.getElementById(&quot;division_number&quot;).value;
    for (var i = 1; i &lt;= 20; i++) {
      var response_div = document.getElementById(&quot;response_&quot; + i);
      while (response_div.firstChild) {
          response_div.removeChild(response_div.firstChild);
      }
      if (number % i == 0) {
        response_div.appendChild(document.createTextNode(&quot;Your number WAS a multiple of &quot; + i + &quot; :)&quot;));
      } else {
        response_div.appendChild(document.createTextNode(&quot;Your number WAS NOT a multiple of &quot; + i + &quot; :(&quot;));
      }
    }
  }
  let increase_and_submit = function increase_and_submit() {
    let input = document.getElementById(&quot;division_number&quot;);
    input.value = Number.parseInt(input.value, 10) + 1;
    check_divisibility();
  }
  let decrease_and_submit = function decrease_and_submit() {
    let input = document.getElementById(&quot;division_number&quot;);
    input.value = Number.parseInt(input.value, 10) - 1;
    check_divisibility();
  }

  document.getElementById(&quot;division_submit&quot;).addEventListener(&quot;click&quot;, check_divisibility, false);
  document.getElementById(&quot;increase_button&quot;).addEventListener(&quot;click&quot;, increase_and_submit, false);
  document.getElementById(&quot;decrease_button&quot;).addEventListener(&quot;click&quot;, decrease_and_submit, false);

  for (var i = 1; i &lt;= 20; i++) {
    var response_div = document.createElement(&quot;div&quot;);
    response_div.setAttribute(&quot;id&quot;, &quot;response_&quot; + i);
    document.getElementById(&quot;output_div&quot;).appendChild(response_div);
  }

&lt;/script&gt;

&lt;h3 id=&quot;prime-factor-knitting&quot;&gt;Prime Factor Knitting&lt;/h3&gt;

&lt;p&gt;I’m not sure how I found myself there but at some time, now long distant, I came across &lt;a href=&quot;http://sonderbooks.com/blog/?p=843&quot;&gt;this&lt;/a&gt; page. The amateur book reviewer and mathematics enthusiast Sondra Eklund had knitted a jumper with an interesting pattern.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pfsweater_front.jpg&quot; alt=&quot;Prime Factor Sweater&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The design featured a grid of colourful blocks on a white background. Truthfully, it looked like it could have been a homage to the &lt;a href=&quot;https://www.wikipedia.org/wiki/International_maritime_signal_flags&quot;&gt;international maritime signal flag alphabet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flag_alphabet.jpg&quot; alt=&quot;Signal Flag Alphabet Graphic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was, in fact, a diagrammatic (knitted) presentation of the numbers 1-100 where the representation of each number depended on its &lt;a href=&quot;https://www.wikipedia.org/wiki/International_maritime_signal_flags&quot;&gt;prime factorization&lt;/a&gt;. The idea was simple:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Give each number its own square on the grid, then split that square into as many parts as it has prime factors.&lt;/li&gt;
  &lt;li&gt;Assign each prime number a different colour, then fill in each square’s subdivisions accordingly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;

&lt;p&gt;The prime divisors of $60$ are $2$, $2$, $3$, and $5$.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
A(60)--&amp;gt;B(2)
A--&amp;gt;C(30)
C--&amp;gt;D(2)
C--&amp;gt;E(15)
E--&amp;gt;F(3)
E--&amp;gt;G(5)
classDef prime stroke-width:4px;
class B,D,F,G prime;
style B fill: #0a69ff
style D fill: #0a69ff
style F fill: #ff4b64
style G fill: #ffd26e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If, then, we decided to assign the colours blue, red, and yellow to the primes $2$ $3$, and $5$ respectively (to match the choice Sondra made in her jumper) - the number 60 would be represented with four blocks like this:&lt;/p&gt;
&lt;div id=&quot;bars&quot;&gt;&lt;/div&gt;
&lt;script&gt;
  var input = [2,2,3,5];
  var anchor = document.getElementById(&quot;bars&quot;);
  // the variable `input` has been passed to
// this code chunk with include data.
// the variable `anchor` is a div where the include
// was called

function append_style(elem, addendum) {
  var style_string = elem.getAttribute('style');
  if (style_string == null) {
    elem.setAttribute('style', addendum);
  } else {
    elem.setAttribute('style', style_string + addendum);
  }
}

function style_setter(div, attribute, value) {
  append_style(div, attribute + ': ' + value + ';');
}

function div_maker(name) {
  var my_div = document.createElement('div');
  my_div.setAttribute('id', name);
  return my_div;
}

function anchor_appender(div) {
  anchor.appendChild(div);
}

function painter(div, color) {
  var color_string = 
    ' background-color: ' + color + ';' +
    'box-sizing: border-box;' +
    'border: 4px solid white;' +
    'float: left'
  append_style(div, color_string);
}

for (var factor of input) {
  var div = div_maker('factor_' + factor);
  style_setter(div, 'width', '2em');
  style_setter(div, 'height', '8em');
  if (factor == 2) {
    painter(div, '#282dff');
  } else if (factor == 3) {
    painter(div, '#cd0028');
  } else if (factor == 5) {
    painter(div, '#f0c364');
  }
  anchor_appender(div);
}

style_setter(anchor, 'width', '8em');
style_setter(anchor, 'height', '8em');

&lt;/script&gt;

&lt;p&gt;Or like this perhaps, depending on how you decide to arrange the blocks:&lt;/p&gt;
&lt;div id=&quot;blocks&quot;&gt;&lt;/div&gt;
&lt;script&gt;
  var input = [3,5,2,2];
  var anchor = document.getElementById(&quot;blocks&quot;);
  // the variable `input` has been passed to
// this code chunk with include data.
// the variable `anchor` is a div where the include
// was called

function append_style(elem, addendum) {
  var style_string = elem.getAttribute('style');
  if (style_string == null) {
    elem.setAttribute('style', addendum);
  } else {
    elem.setAttribute('style', style_string + addendum);
  }
}

function style_setter(div, attribute, value) {
  append_style(div, attribute + ': ' + value + ';');
}

function div_maker(name) {
  var my_div = document.createElement('div');
  my_div.setAttribute('id', name);
  return my_div;
}

function anchor_appender(div) {
  anchor.appendChild(div);
}

function painter(div, color) {
  var color_string = 
    ' background-color: ' + color + ';' +
    'box-sizing: border-box;' +
    'border: 4px solid white;' +
    'float: left'
  append_style(div, color_string);
}

for (var factor of input) {
  var div = div_maker('factor_' + factor);
  style_setter(div, 'width', '4em');
  style_setter(div, 'height', '4em');
  if (factor == 2) {
    painter(div, '#282dff');
  } else if (factor == 3) {
    painter(div, '#cd0028');
  } else if (factor == 5) {
    painter(div, '#f0c364');
  }
  anchor_appender(div);
}

style_setter(anchor, 'width', '8em');
style_setter(anchor, 'height', '8em');

&lt;/script&gt;

&lt;p&gt;and if you take another look at the jumper you can see that’s exactly what has been done:
&lt;img src=&quot;/images/pf_sweater_annotated.jpg&quot; alt=&quot;annotated jumper image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I loved the design, I loved the concept. I had never seen something like that before. Wouldn’t it be nice if there was a nice crisp digital version though? Something that would make a nice abstract looking poster I thought. Rather than a blurry picture of a jumper. I don’t think that really does the idea justice. Amazing jumper - not the ultimate, definite presentation of a very neat idea. I thought I’d make my own version…&lt;/p&gt;

&lt;h4 id=&quot;my-attempt&quot;&gt;My Attempt&lt;/h4&gt;

&lt;p&gt;Turns out it’s a lot of work! I can’t imagine how long it took to knit that jumper - bloody hell. I spent many many hours aligning rectangles of different widths and colors to eventually produce this image:
&lt;img src=&quot;/images/old_poster.jpg&quot; alt=&quot;old prime factor poster design&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And although I was vary very proud of it at the time, and quite convinced of my graphic designing abilities, after making many more iterations of the design I now look back on it with fond nostalgia and slight amusement. What stuck with me most about the experience was the tedium of the creation. It was so painfully clear that this was not a task best suited for human completion. It should be possible to draw this diagram with a computer program!&lt;/p&gt;

&lt;h2 id=&quot;the-scholarly-life&quot;&gt;The Scholarly Life&lt;/h2&gt;

&lt;p&gt;I made quite a few little projects relating to these prompts over the years. Trying to find a solution, experimenting with different approaches, finding commonalities. I learned slowly but I think I learned a lot. When the suggestion of applying to the Laidlaw scholarship was made to me, I had a fairly clear vision (or so I thought) of the ultimate, pedagogical, artistic, freely accessible, intuitive tool that I wanted to author to solve these two problems, and all the problems that lay in the space between them, and also many problems separate but related. I was enthused. I wanted to make art, and to teach, and inspire curiosity. It went down well, I got the scholarship.&lt;/p&gt;

&lt;p&gt;After my first summer of working on the problem, I had not authored such a solution. It turned out my vision was not so clear after all. I spent a lot of time diagramming the problem, and re-diagramming the problem. In some sense what I imagined was simple, it’s just that I lacked all of the understanding necessary to render it simple. I learned a lot that summer. Exiting the year without even half the tool I pictured stung though. After all my diagramming I did at least understand what I was trying to achieve in a technical sense, and that knowledge is summarised in this research poster I created to display at the Laidlaw conference we attended last year:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/research_poster.png&quot; alt=&quot;research poster&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see in the top right a more polished version of the graphic inspired by Sondra Ekland’s jumper, and along the bottom three images exploring different aspects of the type of divisibility visualisation I described before. In the middle of the poster is my attempt to to explain how my proposed program would go about creating these graphics in a general sense.&lt;/p&gt;

&lt;p&gt;The totality of impact and value that summer had cannot really be described, not in a poster or a blog post. I learned a lot, even if I didn’t make a shiny program.&lt;/p&gt;

&lt;p&gt;Regardless, it’s a two year program where a bit of failure (maybe even a lot!) is expected, understood, and appropriately provisioned for. All the better to prepare for the second year. So, the second year - what to do?&lt;/p&gt;

&lt;h2 id=&quot;the-second-year&quot;&gt;The Second Year&lt;/h2&gt;

&lt;p&gt;The Laidlaw programme runs internationally at a number of research institutions. There is drive to enable international research collaboration among institutions and scholars. I found the prospect of researching at a different university, and experiencing life elsewhere at the same time very appealing so I looked into my options. The project has been very much self defined and self driven so there was not a clear blueprint for collaboration. My approach was to first find people I wanted to work with by combing through the associated uni’s mathematics and computer science faculty for researchers with overlapping interests - then if they were willing to talk to me we would figure out the details as needed.&lt;/p&gt;

&lt;p&gt;Without any leads in particular to follow, first I reached out to &lt;a href=&quot;http://www.cs.toronto.edu/~david/index.html&quot;&gt;David Liu&lt;/a&gt; from Toronto university. Communication was like croquet, passing messages through the appropriate wickets of administration. I was fortunate to have the support of the scholarship to enable communication whatsoever. When a message weaved its way back to me the game was up - David was intrigued, but unfortunately not available to work together over the proposed time period.&lt;/p&gt;

&lt;p&gt;It didn’t seem wise to force the project to be collaborative if the proper impetus wasn’t there, so I was hesitant to contact just anybody. Fortunately, shortly after hearing the bad news about Toronto the Laidlaw team here at York caught word that Hong Kong university was particular keen to cross pollinate scholars in the future. With this new information, I again trawled the faculty pages and found a professor I must have missed first time round, because his research areas fit my project direction incredibly well. This time I was told I could contact the academic directly, so I composed an email to &lt;a href=&quot;http://www.cs.hku.hk/research/profile.jsp?teacher=wenping&quot;&gt;Professor Wenping Wang&lt;/a&gt; explaining my plans, attaching my research poster and copying in the relevant people - and I heard back the same evening! He was interested in collaborating.&lt;/p&gt;

&lt;p&gt;The plans we made (what I will be doing now I’m here) will be outlined in the second part of this blog!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;It turns out the latter is much harder than the former. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Joel Strouts</name></author><summary type="html">For the next two months I am working in Hong Kong. While I’m here I think it would be helpful to document my time and the work I’m doing. So that those posts are not completely without context, I will take the next two posts to explain: First - Who I am and how I got here, and second - a proper exposition of the problem I will (at least initially) be working on while I’m here.</summary></entry><entry><title type="html">Scratch</title><link href="https://joelstrouts.com/2000/01/01/Scratch.html" rel="alternate" type="text/html" title="Scratch" /><published>2000-01-01T00:00:00+00:00</published><updated>2000-01-01T00:00:00+00:00</updated><id>https://joelstrouts.com/2000/01/01/Scratch</id><content type="html" xml:base="https://joelstrouts.com/2000/01/01/Scratch.html">&lt;canvas id=&quot;mycanvas&quot; width=&quot;373&quot; height=&quot;752&quot; style=&quot;background-color:#e0e0e0;&quot;&gt;
&lt;/canvas&gt;

&lt;div id=&quot;report&quot; width=&quot;&quot; height=&quot;&quot; style=&quot;&quot;&gt;
&lt;/div&gt;</content><author><name>Joel Strouts</name></author><summary type="html"></summary></entry></feed>