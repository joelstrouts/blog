<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://joelstrouts.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://joelstrouts.com/" rel="alternate" type="text/html" /><updated>2019-09-17T17:52:44+01:00</updated><id>https://joelstrouts.com/</id><title type="html">Joel Strouts</title><subtitle>My personal website.
</subtitle><author><name>Joel Strouts</name></author><entry><title type="html">Memory</title><link href="https://joelstrouts.com/2019/08/20/Memory.html" rel="alternate" type="text/html" title="Memory" /><published>2019-08-20T00:00:00+01:00</published><updated>2019-08-20T00:00:00+01:00</updated><id>https://joelstrouts.com/2019/08/20/Memory</id><content type="html" xml:base="https://joelstrouts.com/2019/08/20/Memory.html">&lt;p&gt;&lt;img src=&quot;/images/hk/black-min.jpg&quot; alt=&quot;black&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I can picture the rows of hedges, rolling hills, and oak trees back home - but whether such things really exist, I have begun to doubt. Just like the existence of this place of thick crowds, thick air, and everywhere tall dirty buildings seemed so unlikely when it was a question of imagination a few months ago. They are so different, the presence of one erodes the plausibility of the other. What’s most perverse is not that England now seems fictitious, but the absolute certainty with which the natural order of things will be restored - I will again know my oak trees, and my rolling hills, and so instead it will be the here and now that seems implausible. This table, the lingering smell of vinegar that started a few minutes ago, the fact that it is sweltering hot even in the dead of night. I will go home and these things will become foggy memories. Was it really that hot? How can a smell of vinegar just abruptly begin? The more time passes the more unquestionable truth is replaced by just questions. And of course you can document thoroughly, take photos, record temperatures (the feels like temperature here, right now, at 5AM, is supposedly 34° - I just checked) but that rather misses the point. It’s not that I don’t know what England is like, photos don’t challenge the memory they just reassert it, but knowledge does not bring England here, and it won’t bring this moment back home.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hk/yellow-min.jpg&quot; alt=&quot;yellow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s always like that though. Even in just the one place. Every year in summer I think how strange it is that it was once winter. Every time I’m ill, good health is mockingly incomprehensible. This failing of the imagination, a hard limit on the number of realities you can hold in mind (no more than one at a time) is mostly quaint. Don’t you know that things go in cycles? So what if winter sounds like a sort of joke, (you’re telling me this same sun, now oppressively hot, will become harsh and bitter cold, and these green trees will turn to looming wooden skeletons? I just don’t buy it) you will see it with your own eyes soon and summer will be the joke instead. A clockwork forgetfulness, even a little humorous. Humorous, that is, until you want to cling on to something, and something that won’t just come back around like the hands on a clock.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hk/car-min.jpg&quot; alt=&quot;car&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Childhood is the first of these losses. You only have it once, you pay little attention, and then it’s gone. Gone with mine is the memory of childhood holidays, which were often to the seaside, often to Guernsey. One detail that remains is of a game that I loved to play as the tide came in. My sister and I would work together, starting hours before the approach began, digging trenches and erecting walls. Fortifying and establishing our own little enclave backed up against the sea wall - our goal: to keep out the rising tide for long as possible. What begins as a very thoughtful architectural consideration quickly becomes frantic and hopeless - it was a good time. Strangely my memory of this is entirely from a birds eye perspective, as if it is not my memory but my parents. Looking down from the promenade, cheering us on as we successfully diverted a minor flooding, or survived a breaking wave. It’s funny remembering that game, because now it seems like the perfect metaphor for trying to preserve the memory of a fleeting moment. It’s hopeless. Photos, essays, souvenirs - they are your fortifications and they do hold back the tide a little while longer, but with plodding wrath the sea foam approaches. Fighting the tide is symbolic, not effective. It’s something you do for sport, for honour, not to win. The high water mark is feet above your head and no cleverness of sand architecture will stop it from being reached. Soon you have to leave your enclave lest you are washed away yourself, and you will look down from the promenade at the place you saved for a minute longer, now no more than eddies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hk/blue-min.jpg&quot; alt=&quot;blue&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So when you’re fond of sand beneath you, and the tide bears down, what do you do? Do you have to fight? Half of me thinks that to fight is to miss the point (the other half thinks fighting is the point). If you spend all your time worrying about the rising sea you can’t enjoy playing on the beach. By always focusing on whether you’ll remember something perhaps you prematurely switch your perspective from that of the child playing, to the parent up watching on the promenade. Living your life in birds eye rather than at ground level. Should you wander the beach and collect shells instead of building sandcastles? Perhaps there will be some peace and serenity in just accepting that your footprints are washed away. There’s something seductive about the idea. That the sea does not rage, but smooths. For every enclave eroded, a whole expanse of fresh sand is deposited. The tide is a gift, a blank canvas! But reality is not so serene I think. Beautiful memories are not lapped at but affronted. Not gracefully broken down but defaced. That awful burden of having to communicate things you don’t have words for. I’ll go home and each time I’m asked what it was like being here I’ll refine my response. That first attempt at a faithful summary will slowly become tighter and wittier, and all the same more untrue. Then all the slight mischaracterisations, made because they played better to others ears, will end up warping my own memory. What mattered to the people who probed about your experience becomes confused with what mattered to you when it actually happened. This warping is made all the more frustrating because you can’t help your own part in it. You will vandalise your own memories, what a cruel trick. Soon enough the person who experienced that moment is a stranger anyway.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hk/rich-min.jpg&quot; alt=&quot;rich&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m reading Anna Karenina at the moment and there are many lovely things about it. It’s a long book, and to get away with being a long book it has to have good language separate from having a good plot - and it does. In the last chapter I read there was one expression that, with the particular way it was phrased, got lodged in my mind. That’s only happened with lasting impact on one other occasion: a line from the film ‘Let the right one in’. In both cases the expression is nothing grand just something simply put, but put right. In the film it’s when one character asks the other if they want to ‘go steady’. That is as in, ‘to go out with’ - In England sometimes if two people are relationship we say they are ‘going out’ and you can express your interest in someone by saying ‘do you want to go out?’ (at least you would in secondary school, flirtation is a bit more, or less, subtle after that). I always thought that saying ‘do you want to go out?’ sounded really stupid, and when I heard this other expression ‘to go steady’ in the film, I thought it was lovely and so much better. In the book what stood out was, at a moment when one character is particularly full of thoughts that they struggle to articulate, the description of how these clumsily worded explanations are received by present company. Our hero is delighted to infer, from the looks of understanding he receives, that he has been understood in the right way. That despite having put his foot in his mouth somewhat, the communication of his deeper meaning was not obstructed. How sweet and reassuring that feeling of being understood is (especially if you proper minced your words) and how clearly those words ‘in the right way’ capture that relief. I like these phrases even more because in both cases the original work was not actually in English, instead it was the translations that contained the lovely expressions. Funny too, because translation itself is the act of trying to understand things ‘in the right way’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hk/lego-min.jpg&quot; alt=&quot;lego&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And I think this is the real answer, what to do with that patch of sand you wish you could protect from the tide. Wanting to remember tomorrow the events of today is a conversation you have with your future self. You carry out your half of the conversation with the photos you take, notes you make, and stories you tell. He carries out his part in how he takes the meanings of those things. The best you can do is accept that you will put your foot in your mouth a little bit and just hope that the stranger in the future takes your meaning in the right way. Words are duplicitous, pictures are deceitful, but you hope that there is some essential kernel of truth that, truly understood now, will be truly understood later. It’s made more hopeful by the fact that the stranger is also technically yourself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hk/distorted-min.jpg&quot; alt=&quot;distorted&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I will miss Hong Kong, and I know I won’t be able to get this moment back even if upon reading this back the stranger takes it in the right way. I know that because thinking about this makes me dwell on all the other moments now lost that can’t be gotten back. Trying to reassemble some past reality feels as useless as trying today to place every grain of sand back where it was yesterday. It is blue, but with sorrow comes a gratitude for what is passed. The special and the temporary together will always be bitter-sweet. Sometimes fighting the tide is a game, but this time I am seeing it all in birds eye too soon and resent the sea for its policy of no exceptions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/hk/green-min.jpg&quot; alt=&quot;rich&quot; /&gt;&lt;/p&gt;

&lt;p&gt;See you soon England.&lt;/p&gt;</content><author><name>Joel Strouts</name></author><summary type="html">I can picture the rows of hedges, rolling hills, and oak trees back home - but whether such things really exist, I have begun to doubt. Just like the existence of this place of thick crowds, thick air, and everywhere tall dirty buildings seemed so unlikely when it was a question of imagination a few months ago. They are so different, the presence of one erodes the plausibility of the other. What’s most perverse is not that England now seems fictitious, but the absolute certainty with which the natural order of things will be restored - I will again know my oak trees, and my rolling hills, and so instead it will be the here and now that seems implausible. This table, the lingering smell of vinegar that started a few minutes ago, the fact that it is sweltering hot even in the dead of night. I will go home and these things will become foggy memories. Was it really that hot? How can a smell of vinegar just abruptly begin? The more time passes the more unquestionable truth is replaced by just questions. And of course you can document thoroughly, take photos, record temperatures (the feels like temperature here, right now, at 5AM, is supposedly 34° - I just checked) but that rather misses the point. It’s not that I don’t know what England is like, photos don’t challenge the memory they just reassert it, but knowledge does not bring England here, and it won’t bring this moment back home. It’s always like that though. Even in just the one place. Every year in summer I think how strange it is that it was once winter. Every time I’m ill, good health is mockingly incomprehensible. This failing of the imagination, a hard limit on the number of realities you can hold in mind (no more than one at a time) is mostly quaint. Don’t you know that things go in cycles? So what if winter sounds like a sort of joke, (you’re telling me this same sun, now oppressively hot, will become harsh and bitter cold, and these green trees will turn to looming wooden skeletons? I just don’t buy it) you will see it with your own eyes soon and summer will be the joke instead. A clockwork forgetfulness, even a little humorous. Humorous, that is, until you want to cling on to something, and something that won’t just come back around like the hands on a clock. Childhood is the first of these losses. You only have it once, you pay little attention, and then it’s gone. Gone with mine is the memory of childhood holidays, which were often to the seaside, often to Guernsey. One detail that remains is of a game that I loved to play as the tide came in. My sister and I would work together, starting hours before the approach began, digging trenches and erecting walls. Fortifying and establishing our own little enclave backed up against the sea wall - our goal: to keep out the rising tide for long as possible. What begins as a very thoughtful architectural consideration quickly becomes frantic and hopeless - it was a good time. Strangely my memory of this is entirely from a birds eye perspective, as if it is not my memory but my parents. Looking down from the promenade, cheering us on as we successfully diverted a minor flooding, or survived a breaking wave. It’s funny remembering that game, because now it seems like the perfect metaphor for trying to preserve the memory of a fleeting moment. It’s hopeless. Photos, essays, souvenirs - they are your fortifications and they do hold back the tide a little while longer, but with plodding wrath the sea foam approaches. Fighting the tide is symbolic, not effective. It’s something you do for sport, for honour, not to win. The high water mark is feet above your head and no cleverness of sand architecture will stop it from being reached. Soon you have to leave your enclave lest you are washed away yourself, and you will look down from the promenade at the place you saved for a minute longer, now no more than eddies. So when you’re fond of sand beneath you, and the tide bears down, what do you do? Do you have to fight? Half of me thinks that to fight is to miss the point (the other half thinks fighting is the point). If you spend all your time worrying about the rising sea you can’t enjoy playing on the beach. By always focusing on whether you’ll remember something perhaps you prematurely switch your perspective from that of the child playing, to the parent up watching on the promenade. Living your life in birds eye rather than at ground level. Should you wander the beach and collect shells instead of building sandcastles? Perhaps there will be some peace and serenity in just accepting that your footprints are washed away. There’s something seductive about the idea. That the sea does not rage, but smooths. For every enclave eroded, a whole expanse of fresh sand is deposited. The tide is a gift, a blank canvas! But reality is not so serene I think. Beautiful memories are not lapped at but affronted. Not gracefully broken down but defaced. That awful burden of having to communicate things you don’t have words for. I’ll go home and each time I’m asked what it was like being here I’ll refine my response. That first attempt at a faithful summary will slowly become tighter and wittier, and all the same more untrue. Then all the slight mischaracterisations, made because they played better to others ears, will end up warping my own memory. What mattered to the people who probed about your experience becomes confused with what mattered to you when it actually happened. This warping is made all the more frustrating because you can’t help your own part in it. You will vandalise your own memories, what a cruel trick. Soon enough the person who experienced that moment is a stranger anyway. I’m reading Anna Karenina at the moment and there are many lovely things about it. It’s a long book, and to get away with being a long book it has to have good language separate from having a good plot - and it does. In the last chapter I read there was one expression that, with the particular way it was phrased, got lodged in my mind. That’s only happened with lasting impact on one other occasion: a line from the film ‘Let the right one in’. In both cases the expression is nothing grand just something simply put, but put right. In the film it’s when one character asks the other if they want to ‘go steady’. That is as in, ‘to go out with’ - In England sometimes if two people are relationship we say they are ‘going out’ and you can express your interest in someone by saying ‘do you want to go out?’ (at least you would in secondary school, flirtation is a bit more, or less, subtle after that). I always thought that saying ‘do you want to go out?’ sounded really stupid, and when I heard this other expression ‘to go steady’ in the film, I thought it was lovely and so much better. In the book what stood out was, at a moment when one character is particularly full of thoughts that they struggle to articulate, the description of how these clumsily worded explanations are received by present company. Our hero is delighted to infer, from the looks of understanding he receives, that he has been understood in the right way. That despite having put his foot in his mouth somewhat, the communication of his deeper meaning was not obstructed. How sweet and reassuring that feeling of being understood is (especially if you proper minced your words) and how clearly those words ‘in the right way’ capture that relief. I like these phrases even more because in both cases the original work was not actually in English, instead it was the translations that contained the lovely expressions. Funny too, because translation itself is the act of trying to understand things ‘in the right way’. And I think this is the real answer, what to do with that patch of sand you wish you could protect from the tide. Wanting to remember tomorrow the events of today is a conversation you have with your future self. You carry out your half of the conversation with the photos you take, notes you make, and stories you tell. He carries out his part in how he takes the meanings of those things. The best you can do is accept that you will put your foot in your mouth a little bit and just hope that the stranger in the future takes your meaning in the right way. Words are duplicitous, pictures are deceitful, but you hope that there is some essential kernel of truth that, truly understood now, will be truly understood later. It’s made more hopeful by the fact that the stranger is also technically yourself. I will miss Hong Kong, and I know I won’t be able to get this moment back even if upon reading this back the stranger takes it in the right way. I know that because thinking about this makes me dwell on all the other moments now lost that can’t be gotten back. Trying to reassemble some past reality feels as useless as trying today to place every grain of sand back where it was yesterday. It is blue, but with sorrow comes a gratitude for what is passed. The special and the temporary together will always be bitter-sweet. Sometimes fighting the tide is a game, but this time I am seeing it all in birds eye too soon and resent the sea for its policy of no exceptions. See you soon England.</summary></entry><entry><title type="html">Research Reflections</title><link href="https://joelstrouts.com/2019/07/31/IFS-writeup.html" rel="alternate" type="text/html" title="Research Reflections" /><published>2019-07-31T00:00:00+01:00</published><updated>2019-07-31T00:00:00+01:00</updated><id>https://joelstrouts.com/2019/07/31/IFS-writeup</id><content type="html" xml:base="https://joelstrouts.com/2019/07/31/IFS-writeup.html">&lt;p&gt;This post is a work in progress. In it I will discuss the mathematics and the finer details of the image generation process I described in my last post.&lt;/p&gt;</content><author><name>Joel Strouts</name></author><summary type="html">This post is a work in progress. In it I will discuss the mathematics and the finer details of the image generation process I described in my last post.</summary></entry><entry><title type="html">Interactive IFS Toy</title><link href="https://joelstrouts.com/2019/07/30/IFS.html" rel="alternate" type="text/html" title="Interactive IFS Toy" /><published>2019-07-30T00:00:00+01:00</published><updated>2019-07-30T00:00:00+01:00</updated><id>https://joelstrouts.com/2019/07/30/IFS</id><content type="html" xml:base="https://joelstrouts.com/2019/07/30/IFS.html">&lt;p&gt;I’ve finished the first stage of my research! I will write in detail about what I’ve learned in a future post but &lt;i&gt;for now&lt;/i&gt; I would just like to share an interactive presentation I put together to explain the generative process for producing IFS images which is at the very heart of what I am doing.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;the-demonstration&quot;&gt;The Demonstration:&lt;/h2&gt;

&lt;!-- 
  TODO:
  - add final slide with interactive options for controlling
  all parameters
  - add feature to reveal report on previously loaded system of
  equations on hover
  - make resolution not depend on computed width, more pixels can suuurely fit on the screen damnit!
--&gt;
&lt;!-- contains the whole bit to be embedded in the page --&gt;
&lt;div style=&quot;background-color: #f5f5f5; padding: 20px; border-radius: 2.1rem; border: 1px solid #4141ff&quot;&gt;
  &lt;!-- contains the visualisations --&gt;
  &lt;div id=&quot;canvas-container&quot; hidden=&quot;true&quot; style=&quot;margin-bottom: 0.5rem&quot;&gt;
  &lt;/div&gt;
  &lt;!-- contains report on last generation --&gt;
  &lt;div id=&quot;report&quot;&gt;&lt;/div&gt;
  &lt;!-- contains the buttons --&gt;
  &lt;div id=&quot;presets&quot;&gt;
    &lt;input style=&quot;background-color: #ddd&quot; type=&quot;button&quot; value=&quot;Binary Tree&quot; alt=&quot;binaryTree&quot; /&gt;
    &lt;input style=&quot;background-color: #ddd&quot; type=&quot;button&quot; value=&quot;Serpinski&quot; alt=&quot;serpinski&quot; /&gt;
    &lt;input style=&quot;background-color: #ddd&quot; type=&quot;button&quot; value=&quot;Sand Dollar&quot; alt=&quot;sandDollar&quot; /&gt;
    &lt;input style=&quot;background-color: #ddd&quot; type=&quot;button&quot; value=&quot;Maple Leaf&quot; alt=&quot;mapleLeaf&quot; /&gt;
    &lt;input style=&quot;background-color: #ddd&quot; type=&quot;button&quot; value=&quot;Barnsley Fern&quot; alt=&quot;barnsleyFern&quot; /&gt;
    &lt;input style=&quot;background-color: #ddd&quot; type=&quot;button&quot; value=&quot;Random&quot; alt=&quot;random&quot; /&gt;
  &lt;/div&gt;
  &lt;div id=&quot;lock-box&quot; style=&quot;visibility: hidden;&quot;&gt;
    &lt;input id=&quot;check-box&quot; type=&quot;checkbox&quot; value=&quot;Keep current random transformation&quot; checked=&quot;&quot; /&gt; Lock current transformation (rather than generating a new pattern each time)
  &lt;/div&gt;
  &lt;!-- contains the textual desctiption --&gt;
  &lt;h4 id=&quot;frame-title&quot;&gt;↑ Choose an image to generate ↑&lt;/h4&gt;
  &lt;div id=&quot;slide-controls&quot; hidden=&quot;true&quot;&gt;
    &lt;input style=&quot;background-color: #ddd&quot; type=&quot;button&quot; value=&quot;previous slide&quot; id=&quot;previous-button&quot; /&gt;
    &lt;input style=&quot;background-color: #ddd&quot; type=&quot;button&quot; value=&quot;next slide&quot; id=&quot;next-button&quot; /&gt;
  &lt;/div&gt;
  &lt;div id=&quot;frame-description-container&quot;&gt;
  &lt;p style=&quot;padding: 0.5rem 1rem; border-top: 1px solid #333333; font-size: 1.1em;&quot; id=&quot;frame-description&quot;&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;!-- all the logic/ content to include in that scaffold --&gt;

&lt;!-- data to be interacted with --&gt;
&lt;script&gt;
  let frames = [
    { // 0
      title:
      &quot;The final result of the image generation process.&quot;,
      description: () =&gt;
      &quot;The image you've just generated is entirely determined the following set of equations:&quot; + IFS.latex + &quot;but how? How exactly are these functions used to generate the above image? That is what we are going to examine.&quot;,
      options: {},
      imageData: () =&gt; IFS.get(eval(preset), 250000, frames[0].options),
    },
    { // I
      title:
      &quot;I. The initial starting point&quot;,
      description: () =&gt; 
      &quot;Yes, the image is generated from a handful (three, four, more perhaps) functions. What are these functions though? You can think of each function as representing a system of rules which tell you how to move points around. That is, if I have a point located in the top right of the image, where should I move it to? how about if it was in the top left?&lt;br&gt;&lt;br&gt; Each function is a different set of rules describing exactly where each point should end up depending on where it started. That is why the first step in the image-generation process is to draw just one point. It is our first point. In the next step we will use the position of that first point to figure out where the second point should go, according to one of the functions.&quot;,
      options: {style: 'blobs', blobsSize: 3},
      imageData: () =&gt; IFS.get(eval(preset), 0, frames[1].options),
    },
    { // II
      title:
      &quot;II. The very first iteration&quot;,
      description: () =&gt;
      &quot;This is the very core process. The initial position, marked in red, was fed into one of the functions and the new position (as determined by the function) was spat out - the new position now marked in black. But hang on, which function? There was more than one function in the definition, and if each one is a different set of rules - how was it decided which rules got used? Well that's the funny part of the algorithm - it was chosen at random. At each step in the process the function which is used gets selected randomly from the handful given in the beginning. Recall that our functions are given by:&quot; + IFS.latex + &quot;In thise case the &lt;i&gt;particular&lt;/i&gt; function which decided where the black point went in &lt;i&gt;this&lt;/i&gt; iteration was: $f_{&quot; + (IFS.lastTransform + 1) +&quot;(\\mathbf{x})}$. If you want to see what would have happened if a different set of rules was applied, click on the image to regenerate it and the function will be randomised again! &lt;br&gt;&lt;br&gt; Note: Although the functions are chosen at random, some are chosen more often than others (so if you've regenerated the image a few times and got the same one each time that's probably why).&quot;,
      options: {style: 'lines', blobsSize: 3},
      imageData: () =&gt; IFS.get(eval(preset), 1, frames[2].options),
    },
    { // III
      title:
      &quot;III. One more step, now with colour!&quot;,
      description: () =&gt; 
      &quot;Picking up from where we left off, we choose another function at random. This time instead of moving the starting point like before, we work with the most recent position, after the last function was applied. The result is three dots, one where we started, one after the first (randomly chosen) function was applied, and then the last one after the new (also randomly chosen) function was used. We draw a line following the path made by our point. &lt;br&gt;&lt;br&gt;For a little more clarity we have coloured the lines tracing each movement from one position to the next. The colour of each line should correspond with the colour of one of our functions shown here:&quot; + IFS.latex,
      options: {style: 'lines', color: 'last', blobsSize: 3},
      imageData: () =&gt; IFS.get(eval(preset), 2, frames[3].options),
      // function call:
      // IFS.get(eval(preset), 5, {style: 'lines', color: 'last'});
    },
    { // IV
      title:
      &quot;IV. 50 Steps in, some patterns emerge.&quot;,
      description: () =&gt;
      &quot;So now you get how it works - we choose a function at random, use it to calculate a new position based on the last one, then colour the path in-between according to which function was used. &lt;br&gt;&lt;br&gt; Now you know how the process works, we can start cranking up the number of steps! Here we've done fifty steps, and the path is definitely random, but there's some order too. The same sorts of arcs traced out over and over. What do you think it will look like when we do even more?&lt;br&gt;&lt;br&gt; The functions, for reference:&quot; + IFS.latex,
      options: {style: 'lines', color: 'last', blobsSize: 3},
      imageData: () =&gt; IFS.get(eval(preset), 50, frames[4].options),
      // function call:
      // IFS.get(eval(preset), 10-1000, {style: 'lines', color: 'last'});
    },
    { // V
      title:
      &quot;V. The output after 2000 of these random jumps&quot;,
      description: () =&gt;
      &quot;Pretty tangled! Is it what you expected? I've reduced the size of the blobs left at each stopping point so they are just little dots, that way you can see the lines better. The outline of the shape has been completely traced now, and as for what's going on in the middle - something interesting! While the lines are very helpful for visualising the process, they are of course absent from the final image so in the next step we will be removing them. &lt;br&gt;&lt;br&gt; The functions, for reference:&quot; + IFS.latex,
      options: {style: 'lines', color: 'last', blobsSize: 0},
      imageData: () =&gt; IFS.get(eval(preset), 2000, frames[5].options),
      // function call:
      // IFS.get(eval(preset), 10,0000, {style: 'lines', color: 'last'});
    },
    { // VI
      title:
      &quot;VI. What you see when you remove all the connecting lines&quot;,
      description: () =&gt;
      &quot;You should just be able to make out the final form now, but a bit faint perhaps - turns out that with the lines removed 2000 iterations doesn't seem like so many after all. Note: when we removed the lines, we kept colour on the points - that is to say: each point is coloured according to which function was responsible for moving it to its current position from whichever position came before.&lt;br&gt;&lt;br&gt; The functions, for reference:&quot; + IFS.latex,
      options: {color: 'last'},
      imageData: () =&gt; IFS.get(eval(preset), 2000, frames[6].options),
    },
    { // VII
      title:
      &quot;VII. From 2,000 to 100,000&quot;,
      description: () =&gt;
      &quot;The image is revealed! At this point the main work is done, the core process is not so complex actually. Of course, this image has colour and the original didn't, but it's for pedagogical purposes! I don't know about you, but when I first saw the pattern coloured like this, I was quite surprised. Something caught me off guard about how the colours segregate themselves into clearly defined regions like that. I think I expected them to be messier and mixed together more. (that does happen to be the case for some of the randomly generated IFSs however). You can see how different regions in the image correspond to specific functions from the definition. &lt;br&gt;&lt;br&gt;The functions, for reference:&quot; + IFS.latex,
      options: {color: 'last'},
      imageData: () =&gt; IFS.get(eval(preset), 100000, frames[7].options),
    },
    { // VIII
      title:
      &quot;VIII. Superimposing the bounding boxes to indicate the different rules&quot;,
      description: () =&gt;
      &quot;To make that relationship (hopefully) even clearer, I've drawn a coloured box for each function which is supposed to give some indication of what it's really doing, let me explain what they mean: Look at the largest box, the black one. Now choose one of the coloured ones, and compare what you see in the big black box to the contents of the smaller, warped, coloured box. The contents of the smaller box should be a small copy of what was in the larger box! That's how the functions really work, you can describe their effect by drawing input/output boxes like this because they keep everything which is within and without in proportion to the change in shape and position of the box. Changing the numbers in the functions essentially correspons to changing the coordinates of these output boxes. &lt;br&gt;&lt;br&gt;The functions, for reference:&quot; + IFS.latex,
      options: {color: 'last', bboxes: true},
      imageData: () =&gt; IFS.get(eval(preset), 100000, frames[8].options),
    },
    { // IX
      title:
      &quot;IX. Ending where we started&quot;,
      description: () =&gt;
      &quot;Removing the colours and the boxes, and adding a few more iterations (now 250,000), we're back where we started. Now you know why the points seem to dance about just slightly every time the image is regenerated - because the randomness in the procedure makes each image unique, yet still they each reveal the same underlying pattern. I hope you found this exposition both interesting and clear! &quot;,
      options: {color: 'uniform'},
      imageData: () =&gt; IFS.get(eval(preset), 250000, frames[9].options),
    },
  ];
&lt;/script&gt;

&lt;!-- interaction handling --&gt;
&lt;script&gt;
  // functions
  // events / content
  let slideNum = 0;
  let preset = 'binaryTree';
  let lockBox = document.getElementById('lock-box');
  let presets = [...document.getElementById('presets').childNodes];
  let loadPreset = (e) =&gt; {
    preset = e.target.alt;
    getFrame(frames[slideNum]);
  }
  for (index in presets) {
    if(presets[index].nodeName == 'INPUT') {
      presets[index].onclick = (e) =&gt; {
        for(indexB in presets) {
            presets[indexB].style = &quot;background-color: #ddd; font-weight: lighter;&quot;
        }
        e.target.style = &quot;background-color: #ddd; font-weight: heavier;&quot;
        preset = e.target.alt;
        console.log(preset);
        if (preset == 'random') {
         lockBox.style = &quot;visibility: visible;&quot;;
        } else {
         lockBox.style = &quot;visibility: hidden;&quot;;
        }
        getFrame(frames[slideNum]);
      };
    }
  }
  let frameDescriptionContainer = document.getElementsByName('frame-description-container');
  let nextButton = document.getElementById('next-button');
  let prevButton = document.getElementById('previous-button');
  let frameDescription = document.getElementById('frame-description');
  let frameTitle = document.getElementById('frame-title');
  let checkBox = document.getElementById('check-box');
  let frameCanvas;
  let frameContext;
  let slideControls = document.getElementById('slide-controls');
  let canvasContainer = document.getElementById('canvas-container');
  let options = 
  nextButton.onclick = () =&gt; { 
    slideNum = (slideNum + 1 + 10) % 10;
    getFrame(frames[slideNum]);
  };
  prevButton.onclick = () =&gt; { 
    slideNum = (slideNum - 1 + 10) % 10;
    getFrame(frames[slideNum]);
  };
  const getFrame = (frame) =&gt; {
    if (canvasContainer.hidden == true) {
      canvasContainer.hidden = false;
      frameCanvas = document.createElement('canvas');
      canvasContainer.appendChild(frameCanvas);
      let containerWidth = canvasContainer.offsetWidth;
      if (canvasContainer.offsetWidth &lt; 490) {
        MathJax.Hub.Config({
          CommonHTML: {
            scale: 50
          }
        });
      }
      frameCanvas.style = &quot;margin-right:auto; margin-left:auto; display:block;&quot;
      frameCanvas.width = containerWidth;
      frameCanvas.height = containerWidth;
      frameCanvas.id = &quot;frame-canvas&quot;
      frameCanvas.onclick = () =&gt; {
        if (checkBox.checked) { 
          frames[slideNum].options.new = false;
        } else {
          frames[slideNum].options.new = true;
        }
        paint(frameCanvas, frames[slideNum].imageData())
        frameDescription.innerHTML = frames[slideNum].description();
        MathJax.Hub.Queue([&quot;Typeset&quot;,MathJax.Hub]);
      };
    }
    slideControls.hidden = false;
    frameTitle.innerHTML = frame.title;
    if (preset == &quot;random&quot; || preset == &quot;mapleLeaf&quot;) {
      IFS.defaultOptions.scale = 0.7;
    } else if (preset == &quot;binaryTree&quot;) {
      IFS.defaultOptions.scale = 0.8;
    } else {
      IFS.defaultOptions.scale = 0.9;
    }
    if (checkBox.checked) { 
      frame.options.new = false;
    } else {
      frame.options.new = true;
    }
    paint(frameCanvas, frame.imageData());
    frameDescription.innerHTML = frame.description();
    MathJax.Hub.Queue([&quot;Typeset&quot;,MathJax.Hub]);
  }
&lt;/script&gt;

&lt;p&gt;Clicking on one of the buttons in the box above will initiate the presentation. Use the next/previous slide buttons to walk through at your own pace.&lt;/p&gt;

&lt;h3 id=&quot;debrief&quot;&gt;Debrief&lt;/h3&gt;

&lt;p&gt;I intended for the presentation to be quite self contained but I will be writing a post soon which discusses the finer details of the process and the mathematics behind it.&lt;/p&gt;</content><author><name>Joel Strouts</name></author><summary type="html">I’ve finished the first stage of my research! I will write in detail about what I’ve learned in a future post but for now I would just like to share an interactive presentation I put together to explain the generative process for producing IFS images which is at the very heart of what I am doing.</summary></entry><entry><title type="html">Creature of Habit</title><link href="https://joelstrouts.com/2019/07/20/In-McDonalds-Again.html" rel="alternate" type="text/html" title="Creature of Habit" /><published>2019-07-20T00:00:00+01:00</published><updated>2019-07-20T00:00:00+01:00</updated><id>https://joelstrouts.com/2019/07/20/In-McDonalds-Again</id><content type="html" xml:base="https://joelstrouts.com/2019/07/20/In-McDonalds-Again.html">&lt;p&gt;A brief update. An important work milestone and a vignette of how I spend my wild late nights in this vibrant, restless city - working in McDonalds.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;a-carafe-out-of-place&quot;&gt;A Carafe out of place&lt;/h3&gt;

&lt;p&gt;My plan read “&lt;em&gt;write next blog by saturday&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;Well it’s 4AM on Sunday morning (which, yes does still count as Saturday) and I’m at the 24 hour McDonald’s by the uni, celebrating - because I am now ready to &lt;strong&gt;begin&lt;/strong&gt; writing it.&lt;/p&gt;

&lt;p&gt;Fight club, the film (although I hear the book is pretty good, maybe better), has been on my mind. Good film. Specifically, right at the start where we are being introduced to the character of Edward Norton, and he tells us about his perfect, modern apartment - his obsession with Ikea, the hand crafted bowls and identity-defining dining set - then it all gets blown up. It’s become a big reference for me. Ed’s condo gets blown to pieces and even though he loved it so, in the end he’s thankful. He thought that he had been making his life more and more perfect but, in the void after the fire, he realised this: Rather than improving his life, he had become the possession of his possessions. By curating a life so exact in its comforts, by assigning such importance to every detail - every coffee cup, coaster, carafe - he suffered from an acute interior-design-related anxiety. An anxiety that he alone was responsible for creating, but nevertheless held him captive. To be unable to buy a new toothbrush because the handle must be rosewood (so as to match the cabinet doors) - Or: to be incapable of sleeping at a friend’s because their bedsheets have not the sufficient thread count. That’s the prison Norton had constructed for himself. And I think the film makes quite a persuasive argument, in this way, that possessions are not all that good. Edward Norton’s case is extreme, but the message is clear, caring about this stuff is a bit silly, and really caring about it might drive you so mad that you get insomnia and, one day, find that your home has spontaneously combusted.&lt;/p&gt;

&lt;p&gt;So Edward realises the error of his ways and begins beating up other men in pub basements. Hang on a minute, what was the moral of the story supposed to be again?&lt;/p&gt;

&lt;p&gt;Anyway, the reason it’s been a big reference for me - this conflict between curated comfort, and the liberty of holding nothing dear - is because I am Edward Norton before his apartment blows up. I have made my life very comfortable, in my very particular ways. I am always making it &lt;em&gt;more&lt;/em&gt; comfortable, and that suits me just fine most the time, until I remember that blazing fire, and Edward’s change of heart. Do I need a change of heart?&lt;/p&gt;

&lt;p&gt;I’ve never been able to stick to a routine, but I sure have built up a nice collection of &lt;em&gt;routines&lt;/em&gt;, and I like to carry them out just-so. Like here, now, at McDonald’s. I’ve only been in Hong Kong a little over two weeks (gee, that’s actually a while isn’t it?) but my order, the bubble tea and the 6 nuggets and fries, I think this is the fourth time I’ve got it. I will get it again, and in the exact same way. Same dips, same shaking spice. I will wear my favourite GAP hoodie (because the AC is a little too cold), I will put my phone in the inwards facing pocket of my Marimekko bum-bag. I will plug my chunky, curly corded headphones in and choose a playlist to listen to (or maybe just put my loves on shuffle). I know what does and does not go in every pocket. I could tell you now exactly what my pockets will contain a week from now. And when I finally get a stain on this jumper that won’t come out, or wear a hole in this bum bag, drop my phone, or God forbid, McDonald’s stops offering this promotion, I will find that really tough.&lt;/p&gt;

&lt;p&gt;The one area of my life I am most guilty of this anxiety-inducing dogged pursuit of, well - I don’t know what it’s even a pursuit of really. Marginal gains? That area is digital, electronic. When I proudly showed my research supervisor one of the little hacks I had put together, &lt;em&gt;he&lt;/em&gt; - post doctorate computer science researcher - called me a nerd. Perhaps efficiency hacks can be justified up to a point, but that seemed like an indication that perhaps the point is behind me.&lt;/p&gt;

&lt;p&gt;I am willing to endure so much frustration in the name of reducing frustration. This week has been a frustration filled one, and now - at it’s end - I have reached the bit with the gains and it’s pretty nice, Check it out!&lt;/p&gt;

&lt;h3 id=&quot;the-big-reveal&quot;&gt;The big reveal&lt;/h3&gt;
&lt;canvas id=&quot;my-canvas&quot; height=&quot;700&quot; width=&quot;600&quot; hidden=&quot;true&quot;&gt;&lt;/canvas&gt;
&lt;p&gt;&lt;input id=&quot;my-button&quot; type=&quot;button&quot; value=&quot;click here to generate a fern!&quot; /&gt;&lt;/p&gt;

&lt;script&gt;
  let canvas = document.getElementById('my-canvas');
  let button = document.getElementById('my-button');
  button.onclick = () =&gt; {
    canvas.hidden = false;
    paint(canvas, IFS.get(barnsleyFern, 250000, {colors: [[255,0,0]]}));
  }
 &lt;/script&gt;

&lt;p&gt;Assuming it worked, and there’s a box above this paragraph that a fern is drawn in when you press the submit button - I am pretty chuffed. The reason I’m questioning whether I’ve used my time well is because the ‘real’ work in producing that image was (to describe what I’ve done in the least favourable way) just me copying someone else’s code. What took the rest of the time, (or actually, most of the time) was in the presentation, and the behind the scenes stuff. The difference between getting it working and getting it working in the particular way that fits my workflow. But it’s done now and hopefully the fussing over details will make the work in the coming weeks go a little smoother.&lt;/p&gt;

&lt;h3 id=&quot;end&quot;&gt;End&lt;/h3&gt;

&lt;p&gt;And that’s where I’m going to leave it. A little thought about fight club, and a little research milestone.&lt;/p&gt;</content><author><name>Joel Strouts</name></author><summary type="html">A brief update. An important work milestone and a vignette of how I spend my wild late nights in this vibrant, restless city - working in McDonalds.</summary></entry><entry><title type="html">Research Plans</title><link href="https://joelstrouts.com/2019/07/10/Working-in-Hong-Kong-Part-2.html" rel="alternate" type="text/html" title="Research Plans" /><published>2019-07-10T00:00:00+01:00</published><updated>2019-07-10T00:00:00+01:00</updated><id>https://joelstrouts.com/2019/07/10/Working-in-Hong-Kong-Part-2</id><content type="html" xml:base="https://joelstrouts.com/2019/07/10/Working-in-Hong-Kong-Part-2.html">&lt;h1 id=&quot;changing-tack&quot;&gt;Changing Tack&lt;/h1&gt;

&lt;p class=&quot;info&quot;&gt;&lt;img src=&quot;/images/beating-windwards.png&quot; alt=&quot;Beating to Windward&quot; /&gt;
Sailing is the art of manoeuvring a vessel to exploit the power of the wind. It is somewhat surprising, and entirely lovely, that this is still possible even when your destination demands that you head directly into the oncoming wind. The wind can be tamed even when it insists on pushing you backwards. Tacking is the name for the type of turn you must perform in order defy the wind’s wishes.&lt;/p&gt;

&lt;p&gt;In this post I describe the work I’m doing while I’m here. &lt;a href=&quot;joelstrouts.com/2019/07/08/Working-in-Hong-Kong-Part-1.html&quot;&gt;The last one&lt;/a&gt; explained how I got here and, in doing so, described the project I proposed in order to secure the opportunity. If I was working on that same project, an entire additional post to explain what I’m up to would be a bit redundant, so naturally - that’s not actually what I’m doing.&lt;/p&gt;

&lt;h2 id=&quot;my-options&quot;&gt;My Options&lt;/h2&gt;

&lt;p&gt;Here’s what happened: First contact with Professor Wang resulted in us scheduling a skype call to talk about the idea of working together - I was supposed to explain my project and describe the expectations I had of the experience. I was quite nervous, but I happily obliged and after ten minutes or so of discussion Professor Wang graciously informed me that my idea was fun, but not of real research interest, then without skipping a beat began to discuss a different problem he had been contemplating. I was blindsided! But the new problem we were discussing was very interesting. Let me try to explain it.&lt;/p&gt;

&lt;p&gt;The problem was to do with fractals. The exact definition of a fractal is a bit fussier than the common usage definition (it is more about a sort of scale-independent roughness). In this article we apply the more common definition: A structure is said to be fractal if it exhibits the property of self similarity.&lt;/p&gt;

&lt;h3 id=&quot;a-brief-discussion-of-fractals&quot;&gt;A Brief Discussion of Fractals&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/barnsley-fern.png&quot; alt=&quot;Barnsley Fern&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pictured above is one of the most well known fractals; the Barnsley Fern. Each individual frond looks like a smaller version of the whole thing, this is what we call self similar. Fractals can be dizzyingly complex, but because they follow a pattern, can be described in surprisingly compact ways. Compact representation, complex realisation. That’s a desirable combination. If you were dealing with a very complex, incredibly detailed problem, and you realised that actually there was an underlying fractal pattern to it, you would be liberated from worrying about all the fine details. Then you could just reason about the general pattern, since the behaviour would be the same at every level.&lt;/p&gt;

&lt;p class=&quot;info&quot;&gt;&lt;strong&gt;Two examples:&lt;/strong&gt; I learned yesterday that some image compression algorithms work by identifying areas which can be described by fractals, because doing so simplifies the representation so much. Also, many games use fractal rules to generate elements of the environment, like mountain ranges, foliage etc. for the same reason.&lt;/p&gt;

&lt;p&gt;The fern pictured above can be generated by the repeated application of these rules:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\bbox[20px, border: 2px solid orange]{
\begin{align}
f_{1}(x,y)=\begin{bmatrix}0.00 &amp; 0.00\\0.00 &amp; 0.16\end{bmatrix}\phantom{-}&amp;\begin{bmatrix}x\\y\end{bmatrix} \\
f_{2}(x,y)=\begin{bmatrix}0.85 &amp; 0.04\\-0.04 &amp; 0.85\end{bmatrix}&amp;\begin{bmatrix}x\\y\end{bmatrix} + \begin{bmatrix}0,00\\1.60\end{bmatrix} \\
f_{3}(x,y)=\begin{bmatrix}0.00 &amp; 0.00\\0.00 &amp; 0.16\end{bmatrix}\phantom{-}&amp;\begin{bmatrix}x\\y\end{bmatrix} + \begin{bmatrix}0,00\\1.60\end{bmatrix} \\
f_{4}(x,y)=\begin{bmatrix}0.00 &amp; 0.00\\0.00 &amp; 0.16\end{bmatrix}\phantom{-}&amp;\begin{bmatrix}x\\y\end{bmatrix} + \begin{bmatrix}0,00\\0.44\end{bmatrix}
\end{align}
} %]]&gt;&lt;/script&gt;

&lt;p&gt;Where each function is what we call an &lt;a href=&quot;https://www.wikipedia.org/wiki/Affine_transformation&quot;&gt;&lt;em&gt;affine transformation&lt;/em&gt;&lt;/a&gt;, meaning they can be described by a combination of a linear transformation and a translation. Affine transformations let you shift and stretch your input in many ways, only dissalowing changes which would cause straight lines to become curved.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fern-affines.png&quot; alt=&quot;Affine transformations generating the barnsley fern&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here you can see visually what those four affine transformations (that were provided in mathematical notation) really describe. Varying the coefficients that define these transformation can produce other fern like outputs and other forms, sometimes natural - often more abstract, too. A gallery of images produced in this way can be found &lt;a href=&quot;http://paulbourke.net/fractals/ifs/&quot;&gt;here&lt;/a&gt;. One such example is shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/sand-dollar-IFS.jpg&quot; alt=&quot;Sand Dollar Fractal&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-suggestion&quot;&gt;The Suggestion&lt;/h3&gt;

&lt;p&gt;The problem was this: Rather than choosing affine transformations then seeing what image results, is it possible to reverse engineer what the transformations must have been just from the resulting image?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
  subgraph Not the problem
    a1[Function Defintions]--&amp;gt;a2[Picture of Fractal]
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph RL
  subgraph The problem
    b2[Picture of Fractal]--&amp;gt;b1[Function Defintions]
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More specifically the question was: can you write a program that would automate this process? Write a program capable of reproducing input images with great accuracy when they contain fractal patterns.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
  subgraph What a solution would look like
    A[Input Image]--&amp;gt;B[Computer program]
    B--&amp;gt;C[Reproduction of input image]
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That was pretty much the suggestion. I was not downtrodden that the Professor had expressed his disinterest in working on my original suggestion because he criticisms were reasonable (It is more of an exercise in pedagogy and design than a mathematics/ computer science research) and because I was flattered that despite this he was still interested in working with me and immediately suggested an interesting project that was accessible and relevant to me.&lt;/p&gt;

&lt;h3 id=&quot;the-dilemma--the-conclusion&quot;&gt;The Dilemma / The Conclusion&lt;/h3&gt;

&lt;p&gt;What about my original project? I secured my place on the scholarship program, at least superficially, for the express purpose of realising that idea. So although the prospect on working with Professor Wang at HKU was very exciting, it was not clear that it was the best thing to do. I asked Professor Wang if it would be possible to compromise and instead divide the time available evenly between work on my own project and on the problem he suggested. He responded that this was in theory possible but not optimal because he would not be able to contribute as much to my project so my being there would be of less use. Very understandable objection! I talked to the scholarship team in York and in the end we decided it was best to take the original offer. The scholarship is actually more about personal development than specific project outcomes. The opportunities to learn and grow as a person by taking this chance far outweighed what was offered by my other options. It still feels a bit wrong to have abandoned my project like that though, so, I have not shelved it completely. I’d like to frame what’s happening as more of a beating to windward sort of situation - and in the end my project will be the better for it.&lt;/p&gt;

&lt;h2 id=&quot;the-plan&quot;&gt;The Plan&lt;/h2&gt;

&lt;p&gt;So, that is why I am here and that is what I will be working on. Although  is not absolutely required that &lt;strong&gt;this&lt;/strong&gt; is the problem we work the whole time; perhaps if we reach a dead end, find something more interesting, or perhaps even solve the problem to our satisfaction, then we will work on something else. Nevertheless, right now the plan is just to tackle this problem with maximum vitality and then reassess the situation as necessary.&lt;/p&gt;

&lt;h3 id=&quot;conceptual-level&quot;&gt;Conceptual level&lt;/h3&gt;

&lt;p&gt;So, my first thought on seeing the problem was that it was really composed of two separate sub-problems. First, ‘&lt;em&gt;feature extraction&lt;/em&gt;’. There is a natural sense that we have, as humans, upon seeing an image - ‘oh it has this pattern’ or, ‘oh, it has that pattern’. When we see a picture of the fern we are immediately aware that the form has structure, and if asked we could describe that structure ‘this frond is like that frond, this stem like the other’.  We have an intuition about it. This is not so obvious to a computer. Let’s say you have identified which parts look like copies of larger parts though, what’s left to do is figure out how to encode that information as a set of transformations. This is what I saw:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
  A[Input image]--&amp;gt;b1[feature extraction]
  subgraph The program
    b1--&amp;gt;b2[transformation inference]
  end
  b2--&amp;gt;C[Reproduced input image]
  b1-.-d1(very difficult?)
  b2-.-d2(not so difficult?)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have talked to Professor Wang and he agrees that this is a natural way of dividing up the problem, and that it would be wise to begin with that second sub-problem. To begin with the feature identification process can be performed by the user of the program interactively.&lt;/p&gt;

&lt;h3 id=&quot;practical-level&quot;&gt;Practical Level&lt;/h3&gt;

&lt;p&gt;I have had a lot of problems choosing the wrong technology in the past. I think I’ve been too ambitious - trying to optimise for learning potential not just practicality, so choosing something slightly too unfamiliar or demanding, or perhaps with poor support. This time I will try to avoid making the same mistake. Practically, that means I will try:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Using javascript because I’m more familiar with it,&lt;/li&gt;
  &lt;li&gt;Using python because it’s well supported&lt;/li&gt;
  &lt;li&gt;Using libraries where possible so I don’t keep trying to re-invent the wheel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, my focus right away will just to get something, anything, up and running as quickly as possible as I have often been guilty of analysis paralysis. Soon (by the start of next week?), I hope to be able to embed a barnsley fern that I have generated myself, ideally in an interactive format.&lt;/p&gt;

&lt;h2 id=&quot;obstacles&quot;&gt;Obstacles&lt;/h2&gt;

&lt;p&gt;Generally, thinking of the project as a whole, I see many obstacles. Especially in the second part. For now I’ll focus on the near term.&lt;/p&gt;

&lt;p&gt;My primary practical concern was, initially, technology. I had talked to the Professor about what technology he would use to implement a demo of a program like this and he suggested $\texttt{c++}$. I have never used $\texttt{c++}$ before so that did worry me a bit. Researching this approach showed me that it would likely involve learning about a graphics library like &lt;a href=&quot;https://en.m.wikipedia.org/wiki/OpenGL&quot;&gt;OpenGL&lt;/a&gt;, which in turn meant learning about graphics pipelines, with shaders and tesselaters, and rasterization. I still want to learn those things but I now see them as secondary to my real target, and perhaps even distractions if I focus on them.&lt;/p&gt;

&lt;p&gt;Other than that, I think that the applicability of this approach (entirely affine transformations based) concerns me somewhat. Yes, you can generate many fern like structures this way, even in three dimensions (resulting in a form like a &lt;a href=&quot;https://en.m.wikipedia.org/wiki/Romanesco_broccoli&quot;&gt;Romanesco cauliflower&lt;/a&gt; but these forms are almost &lt;em&gt;too&lt;/em&gt; regular, and I think do not really capture the full breadth of self similar structures.&lt;/p&gt;

&lt;p&gt;I must say though, once my short term goal was clear (write a simple program in any language which will generate Bernsley-Fern type fractals and allow you to vary the underlying affine transformations), I felt less bothered by the potential difficulties down the road. First, this - then that.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I need to get on with it! Tomorrow I begin.&lt;/p&gt;</content><author><name>Joel Strouts</name></author><summary type="html">Changing Tack Sailing is the art of manoeuvring a vessel to exploit the power of the wind. It is somewhat surprising, and entirely lovely, that this is still possible even when your destination demands that you head directly into the oncoming wind. The wind can be tamed even when it insists on pushing you backwards. Tacking is the name for the type of turn you must perform in order defy the wind’s wishes. In this post I describe the work I’m doing while I’m here. The last one explained how I got here and, in doing so, described the project I proposed in order to secure the opportunity. If I was working on that same project, an entire additional post to explain what I’m up to would be a bit redundant, so naturally - that’s not actually what I’m doing. My Options Here’s what happened: First contact with Professor Wang resulted in us scheduling a skype call to talk about the idea of working together - I was supposed to explain my project and describe the expectations I had of the experience. I was quite nervous, but I happily obliged and after ten minutes or so of discussion Professor Wang graciously informed me that my idea was fun, but not of real research interest, then without skipping a beat began to discuss a different problem he had been contemplating. I was blindsided! But the new problem we were discussing was very interesting. Let me try to explain it. The problem was to do with fractals. The exact definition of a fractal is a bit fussier than the common usage definition (it is more about a sort of scale-independent roughness). In this article we apply the more common definition: A structure is said to be fractal if it exhibits the property of self similarity. A Brief Discussion of Fractals Pictured above is one of the most well known fractals; the Barnsley Fern. Each individual frond looks like a smaller version of the whole thing, this is what we call self similar. Fractals can be dizzyingly complex, but because they follow a pattern, can be described in surprisingly compact ways. Compact representation, complex realisation. That’s a desirable combination. If you were dealing with a very complex, incredibly detailed problem, and you realised that actually there was an underlying fractal pattern to it, you would be liberated from worrying about all the fine details. Then you could just reason about the general pattern, since the behaviour would be the same at every level. Two examples: I learned yesterday that some image compression algorithms work by identifying areas which can be described by fractals, because doing so simplifies the representation so much. Also, many games use fractal rules to generate elements of the environment, like mountain ranges, foliage etc. for the same reason. The fern pictured above can be generated by the repeated application of these rules: Where each function is what we call an affine transformation, meaning they can be described by a combination of a linear transformation and a translation. Affine transformations let you shift and stretch your input in many ways, only dissalowing changes which would cause straight lines to become curved. Here you can see visually what those four affine transformations (that were provided in mathematical notation) really describe. Varying the coefficients that define these transformation can produce other fern like outputs and other forms, sometimes natural - often more abstract, too. A gallery of images produced in this way can be found here. One such example is shown below. The Suggestion The problem was this: Rather than choosing affine transformations then seeing what image results, is it possible to reverse engineer what the transformations must have been just from the resulting image? graph LR subgraph Not the problem a1[Function Defintions]--&amp;gt;a2[Picture of Fractal] end graph RL subgraph The problem b2[Picture of Fractal]--&amp;gt;b1[Function Defintions] end More specifically the question was: can you write a program that would automate this process? Write a program capable of reproducing input images with great accuracy when they contain fractal patterns. graph LR subgraph What a solution would look like A[Input Image]--&amp;gt;B[Computer program] B--&amp;gt;C[Reproduction of input image] end That was pretty much the suggestion. I was not downtrodden that the Professor had expressed his disinterest in working on my original suggestion because he criticisms were reasonable (It is more of an exercise in pedagogy and design than a mathematics/ computer science research) and because I was flattered that despite this he was still interested in working with me and immediately suggested an interesting project that was accessible and relevant to me. The Dilemma / The Conclusion What about my original project? I secured my place on the scholarship program, at least superficially, for the express purpose of realising that idea. So although the prospect on working with Professor Wang at HKU was very exciting, it was not clear that it was the best thing to do. I asked Professor Wang if it would be possible to compromise and instead divide the time available evenly between work on my own project and on the problem he suggested. He responded that this was in theory possible but not optimal because he would not be able to contribute as much to my project so my being there would be of less use. Very understandable objection! I talked to the scholarship team in York and in the end we decided it was best to take the original offer. The scholarship is actually more about personal development than specific project outcomes. The opportunities to learn and grow as a person by taking this chance far outweighed what was offered by my other options. It still feels a bit wrong to have abandoned my project like that though, so, I have not shelved it completely. I’d like to frame what’s happening as more of a beating to windward sort of situation - and in the end my project will be the better for it. The Plan So, that is why I am here and that is what I will be working on. Although is not absolutely required that this is the problem we work the whole time; perhaps if we reach a dead end, find something more interesting, or perhaps even solve the problem to our satisfaction, then we will work on something else. Nevertheless, right now the plan is just to tackle this problem with maximum vitality and then reassess the situation as necessary. Conceptual level So, my first thought on seeing the problem was that it was really composed of two separate sub-problems. First, ‘feature extraction’. There is a natural sense that we have, as humans, upon seeing an image - ‘oh it has this pattern’ or, ‘oh, it has that pattern’. When we see a picture of the fern we are immediately aware that the form has structure, and if asked we could describe that structure ‘this frond is like that frond, this stem like the other’. We have an intuition about it. This is not so obvious to a computer. Let’s say you have identified which parts look like copies of larger parts though, what’s left to do is figure out how to encode that information as a set of transformations. This is what I saw: graph LR A[Input image]--&amp;gt;b1[feature extraction] subgraph The program b1--&amp;gt;b2[transformation inference] end b2--&amp;gt;C[Reproduced input image] b1-.-d1(very difficult?) b2-.-d2(not so difficult?) I have talked to Professor Wang and he agrees that this is a natural way of dividing up the problem, and that it would be wise to begin with that second sub-problem. To begin with the feature identification process can be performed by the user of the program interactively. Practical Level I have had a lot of problems choosing the wrong technology in the past. I think I’ve been too ambitious - trying to optimise for learning potential not just practicality, so choosing something slightly too unfamiliar or demanding, or perhaps with poor support. This time I will try to avoid making the same mistake. Practically, that means I will try: Using javascript because I’m more familiar with it, Using python because it’s well supported Using libraries where possible so I don’t keep trying to re-invent the wheel Additionally, my focus right away will just to get something, anything, up and running as quickly as possible as I have often been guilty of analysis paralysis. Soon (by the start of next week?), I hope to be able to embed a barnsley fern that I have generated myself, ideally in an interactive format. Obstacles Generally, thinking of the project as a whole, I see many obstacles. Especially in the second part. For now I’ll focus on the near term. My primary practical concern was, initially, technology. I had talked to the Professor about what technology he would use to implement a demo of a program like this and he suggested $\texttt{c++}$. I have never used $\texttt{c++}$ before so that did worry me a bit. Researching this approach showed me that it would likely involve learning about a graphics library like OpenGL, which in turn meant learning about graphics pipelines, with shaders and tesselaters, and rasterization. I still want to learn those things but I now see them as secondary to my real target, and perhaps even distractions if I focus on them. Other than that, I think that the applicability of this approach (entirely affine transformations based) concerns me somewhat. Yes, you can generate many fern like structures this way, even in three dimensions (resulting in a form like a Romanesco cauliflower but these forms are almost too regular, and I think do not really capture the full breadth of self similar structures. I must say though, once my short term goal was clear (write a simple program in any language which will generate Bernsley-Fern type fractals and allow you to vary the underlying affine transformations), I felt less bothered by the potential difficulties down the road. First, this - then that. Conclusion I need to get on with it! Tomorrow I begin.</summary></entry><entry><title type="html">My journey to HKU</title><link href="https://joelstrouts.com/2019/07/08/Working-in-Hong-Kong-Part-1.html" rel="alternate" type="text/html" title="My journey to HKU" /><published>2019-07-08T00:00:00+01:00</published><updated>2019-07-08T00:00:00+01:00</updated><id>https://joelstrouts.com/2019/07/08/Working-in-Hong-Kong-Part-1</id><content type="html" xml:base="https://joelstrouts.com/2019/07/08/Working-in-Hong-Kong-Part-1.html">&lt;p&gt;For the next two months I am working in Hong Kong. While I’m here I think it would be helpful to document my time and the work I’m doing. So that those posts are not completely without context, I will take the next two posts to explain: First - Who I am and how I got here, and second - a proper exposition of the problem I will (at least initially) be working on while I’m here.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;who-am-i&quot;&gt;Who Am I?&lt;/h1&gt;

&lt;p&gt;I’m a maths student (just finished my second year) at &lt;a href=&quot;https://www.york.ac.uk&quot;&gt;York University&lt;/a&gt;. In my first year I was intent on lining up something interesting to do in the summer break, so I talked to my supervisor and he recommended looking into a programme called the Laidlaw scholarship. The purpose of the program was broadly to encourage undergraduate research. Open to all students with at least two years of their degree left before graduation. This was the deal:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Suggest a project of your own devising, complete with research plan and personal statement&lt;/li&gt;
  &lt;li&gt;If shortlisted then you would also be subjected to a logical reasoning test and interview process&lt;/li&gt;
  &lt;li&gt;Selected applicants would receive funding to complete whichever project they put forward in their application, and also be enrolled in a leadership development program.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I knew exactly what I would have &lt;em&gt;liked&lt;/em&gt; to work on as a scholarship beneficiary - but I didn’t fancy my chances getting it.&lt;/p&gt;

&lt;h2 id=&quot;laidlaw-the-dream-project&quot;&gt;Laidlaw: The Dream Project&lt;/h2&gt;

&lt;p&gt;There are two little projects I worked on long ago that I never dislodged from my mind and ended up becoming entangled with one another. The story of those two mini projects together tell the story of this bigger project I am now in the middle of. First: learning to code.&lt;/p&gt;

&lt;h3 id=&quot;division-problems&quot;&gt;Division problems&lt;/h3&gt;
&lt;p&gt;I was adamant (to the detriment of my actual exam grades at the time) - I &lt;em&gt;would&lt;/em&gt; learn to program. I had tried working through some courses on &lt;a href=&quot;https://codeacademy.com&quot;&gt;codeacademy&lt;/a&gt; but nothing really stuck, in the end what worked for me was playing around with making my own web-pages/websites&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. To would google ‘simple programming projects’ and complete anything I could. There was one project, simple remit, that really intrigued me. The task was simply to create a web page with two elements: an input box, and a submit button. When you typed a number into the box and hit submit, the idea was that the webpage would then display one of two different responses:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Your number WAS a multiple of 6 :)”, or:&lt;/li&gt;
  &lt;li&gt;“Your number WAS NOT a multiple of 6 :(“&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sure, not particularly interesting, but good coding practice I thought. Once I got it working I didn’t move on right away but instead tried some variations on the core idea. First: Why six? It could have been any number, so I made the divisor a variable and played around with different values. Once It could handle any divisor I tried the idea of doing two divisibility checks at once - now the program showed two lines when you submitted your number: &lt;em&gt;Is your number a multiple of 6?&lt;/em&gt; AND &lt;em&gt;Is your number a multiple of 4?&lt;/em&gt;. It was still pretty boring. I tried instead not one, not two, but a bunch. At that point it became a bit more interesting.&lt;/p&gt;

&lt;p&gt;The output looked like a 20 item checklist. As you cycled through inputs, the lines of text would perform a little dance as the divisors flicked on and off. There was a pleasing sort of pattern to it, the second line oscillating on and off with every next number, the third similar but instead going: on, off, off, on, off off. All of them related but not quite in sync. You could gleam something deeper was going on, but still, all of this information was being displayed in such a quaint way: lines of text of different length either affirming divisibility or stating lack thereof. Surely, &lt;em&gt;surely&lt;/em&gt;, this should be represented graphically? Just literal check boxes would be superior to these verbose textual descriptions. The problem was: although I could picture in my mind what this far superior graphical replacement would look like, my programming abilities at the time were prohibitive of such an endeavour.&lt;/p&gt;

&lt;h4 id=&quot;enter-a-whole-number&quot;&gt;Enter a whole number&lt;/h4&gt;
&lt;script&gt;
  function check_for_submit(e) {
    if (e.keyCode == 13) {
      check_divisibility();
      return false;
    } else if (e.keyCode == 38) {
      increase_and_submit();
      return false;
    } else if (e.keyCode == 40) {
      decrease_and_submit();
      return false;
    } else {
      return true;
    }
  }
&lt;/script&gt;

&lt;p&gt;&lt;input id=&quot;division_number&quot; type=&quot;number&quot; onkeydown=&quot;return check_for_submit(event)&quot; onkeypress=&quot;return check_for_submit(event)&quot; /&gt;
&lt;input id=&quot;division_submit&quot; value=&quot;submit&quot; type=&quot;submit&quot; /&gt;
&lt;br /&gt;
&lt;input id=&quot;increase_button&quot; type=&quot;button&quot; value=&quot;increase&quot; /&gt;
&lt;input id=&quot;decrease_button&quot; type=&quot;button&quot; value=&quot;decrease&quot; /&gt;&lt;/p&gt;
&lt;div id=&quot;output_div&quot;&gt;&lt;/div&gt;

&lt;script&gt;
  let check_divisibility = function check_divisibility() {
    let number = document.getElementById(&quot;division_number&quot;).value;
    for (var i = 1; i &lt;= 20; i++) {
      var response_div = document.getElementById(&quot;response_&quot; + i);
      while (response_div.firstChild) {
          response_div.removeChild(response_div.firstChild);
      }
      if (number % i == 0) {
        response_div.appendChild(document.createTextNode(&quot;Your number WAS a multiple of &quot; + i + &quot; :)&quot;));
      } else {
        response_div.appendChild(document.createTextNode(&quot;Your number WAS NOT a multiple of &quot; + i + &quot; :(&quot;));
      }
    }
  }
  let increase_and_submit = function increase_and_submit() {
    let input = document.getElementById(&quot;division_number&quot;);
    input.value = Number.parseInt(input.value, 10) + 1;
    check_divisibility();
  }
  let decrease_and_submit = function decrease_and_submit() {
    let input = document.getElementById(&quot;division_number&quot;);
    input.value = Number.parseInt(input.value, 10) - 1;
    check_divisibility();
  }

  document.getElementById(&quot;division_submit&quot;).addEventListener(&quot;click&quot;, check_divisibility, false);
  document.getElementById(&quot;increase_button&quot;).addEventListener(&quot;click&quot;, increase_and_submit, false);
  document.getElementById(&quot;decrease_button&quot;).addEventListener(&quot;click&quot;, decrease_and_submit, false);

  for (var i = 1; i &lt;= 20; i++) {
    var response_div = document.createElement(&quot;div&quot;);
    response_div.setAttribute(&quot;id&quot;, &quot;response_&quot; + i);
    document.getElementById(&quot;output_div&quot;).appendChild(response_div);
  }

&lt;/script&gt;

&lt;h3 id=&quot;prime-factor-knitting&quot;&gt;Prime Factor Knitting&lt;/h3&gt;

&lt;p&gt;I’m not sure how I found myself there but at some time, now long distant, I came across &lt;a href=&quot;http://sonderbooks.com/blog/?p=843&quot;&gt;this&lt;/a&gt; page. The amateur book reviewer and mathematics enthusiast Sondra Eklund had knitted a jumper with an interesting pattern.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pfsweater_front.jpg&quot; alt=&quot;Prime Factor Sweater&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The design featured a grid of colourful blocks on a white background. Truthfully, it looked like it could have been a homage to the &lt;a href=&quot;https://www.wikipedia.org/wiki/International_maritime_signal_flags&quot;&gt;international maritime signal flag alphabet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/flag_alphabet.jpg&quot; alt=&quot;Signal Flag Alphabet Graphic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was, in fact, a diagrammatic (knitted) presentation of the numbers 1-100 where the representation of each number depended on its &lt;a href=&quot;https://www.wikipedia.org/wiki/International_maritime_signal_flags&quot;&gt;prime factorization&lt;/a&gt;. The idea was simple:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Give each number its own square on the grid, then split that square into as many parts as it has prime factors.&lt;/li&gt;
  &lt;li&gt;Assign each prime number a different colour, then fill in each square’s subdivisions accordingly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;

&lt;p&gt;The prime divisors of $60$ are $2$, $2$, $3$, and $5$.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
A(60)--&amp;gt;B(2)
A--&amp;gt;C(30)
C--&amp;gt;D(2)
C--&amp;gt;E(15)
E--&amp;gt;F(3)
E--&amp;gt;G(5)
classDef prime stroke-width:4px;
class B,D,F,G prime;
style B fill: #0a69ff
style D fill: #0a69ff
style F fill: #ff4b64
style G fill: #ffd26e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If, then, we decided to assign the colours blue, red, and yellow to the primes $2$ $3$, and $5$ respectively (to match the choice Sondra made in her jumper) - the number 60 would be represented with four blocks like this:&lt;/p&gt;
&lt;div id=&quot;bars&quot;&gt;&lt;/div&gt;
&lt;script&gt;
  var input = [2,2,3,5];
  var anchor = document.getElementById(&quot;bars&quot;);
  // the variable `input` has been passed to
// this code chunk with include data.
// the variable `anchor` is a div where the include
// was called

function append_style(elem, addendum) {
  var style_string = elem.getAttribute('style');
  if (style_string == null) {
    elem.setAttribute('style', addendum);
  } else {
    elem.setAttribute('style', style_string + addendum);
  }
}

function style_setter(div, attribute, value) {
  append_style(div, attribute + ': ' + value + ';');
}

function div_maker(name) {
  var my_div = document.createElement('div');
  my_div.setAttribute('id', name);
  return my_div;
}

function anchor_appender(div) {
  anchor.appendChild(div);
}

function painter(div, color) {
  var color_string = 
    ' background-color: ' + color + ';' +
    'box-sizing: border-box;' +
    'border: 4px solid white;' +
    'float: left'
  append_style(div, color_string);
}

for (var factor of input) {
  var div = div_maker('factor_' + factor);
  style_setter(div, 'width', '2em');
  style_setter(div, 'height', '8em');
  if (factor == 2) {
    painter(div, '#282dff');
  } else if (factor == 3) {
    painter(div, '#cd0028');
  } else if (factor == 5) {
    painter(div, '#f0c364');
  }
  anchor_appender(div);
}

style_setter(anchor, 'width', '8em');
style_setter(anchor, 'height', '8em');

&lt;/script&gt;

&lt;p&gt;Or like this perhaps, depending on how you decide to arrange the blocks:&lt;/p&gt;
&lt;div id=&quot;blocks&quot;&gt;&lt;/div&gt;
&lt;script&gt;
  var input = [3,5,2,2];
  var anchor = document.getElementById(&quot;blocks&quot;);
  // the variable `input` has been passed to
// this code chunk with include data.
// the variable `anchor` is a div where the include
// was called

function append_style(elem, addendum) {
  var style_string = elem.getAttribute('style');
  if (style_string == null) {
    elem.setAttribute('style', addendum);
  } else {
    elem.setAttribute('style', style_string + addendum);
  }
}

function style_setter(div, attribute, value) {
  append_style(div, attribute + ': ' + value + ';');
}

function div_maker(name) {
  var my_div = document.createElement('div');
  my_div.setAttribute('id', name);
  return my_div;
}

function anchor_appender(div) {
  anchor.appendChild(div);
}

function painter(div, color) {
  var color_string = 
    ' background-color: ' + color + ';' +
    'box-sizing: border-box;' +
    'border: 4px solid white;' +
    'float: left'
  append_style(div, color_string);
}

for (var factor of input) {
  var div = div_maker('factor_' + factor);
  style_setter(div, 'width', '4em');
  style_setter(div, 'height', '4em');
  if (factor == 2) {
    painter(div, '#282dff');
  } else if (factor == 3) {
    painter(div, '#cd0028');
  } else if (factor == 5) {
    painter(div, '#f0c364');
  }
  anchor_appender(div);
}

style_setter(anchor, 'width', '8em');
style_setter(anchor, 'height', '8em');

&lt;/script&gt;

&lt;p&gt;and if you take another look at the jumper you can see that’s exactly what has been done:
&lt;img src=&quot;/images/pf_sweater_annotated.jpg&quot; alt=&quot;annotated jumper image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I loved the design, I loved the concept. I had never seen something like that before. Wouldn’t it be nice if there was a nice crisp digital version though? Something that would make a nice abstract looking poster I thought. Rather than a blurry picture of a jumper. I don’t think that really does the idea justice. Amazing jumper - not the ultimate, definite presentation of a very neat idea. I thought I’d make my own version…&lt;/p&gt;

&lt;h4 id=&quot;my-attempt&quot;&gt;My Attempt&lt;/h4&gt;

&lt;p&gt;Turns out it’s a lot of work! I can’t imagine how long it took to knit that jumper - bloody hell. I spent many many hours aligning rectangles of different widths and colors to eventually produce this image:
&lt;img src=&quot;/images/old_poster.jpg&quot; alt=&quot;old prime factor poster design&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And although I was vary very proud of it at the time, and quite convinced of my graphic designing abilities, after making many more iterations of the design I now look back on it with fond nostalgia and slight amusement. What stuck with me most about the experience was the tedium of the creation. It was so painfully clear that this was not a task best suited for human completion. It should be possible to draw this diagram with a computer program!&lt;/p&gt;

&lt;h2 id=&quot;the-scholarly-life&quot;&gt;The Scholarly Life&lt;/h2&gt;

&lt;p&gt;I made quite a few little projects relating to these prompts over the years. Trying to find a solution, experimenting with different approaches, finding commonalities. I learned slowly but I think I learned a lot. When the suggestion of applying to the Laidlaw scholarship was made to me, I had a fairly clear vision (or so I thought) of the ultimate, pedagogical, artistic, freely accessible, intuitive tool that I wanted to author to solve these two problems, and all the problems that lay in the space between them, and also many problems separate but related. I was enthused. I wanted to make art, and to teach, and inspire curiosity. It went down well, I got the scholarship.&lt;/p&gt;

&lt;p&gt;After my first summer of working on the problem, I had not authored such a solution. It turned out my vision was not so clear after all. I spent a lot of time diagramming the problem, and re-diagramming the problem. In some sense what I imagined was simple, it’s just that I lacked all of the understanding necessary to render it simple. I learned a lot that summer. Exiting the year without even half the tool I pictured stung though. After all my diagramming I did at least understand what I was trying to achieve in a technical sense, and that knowledge is summarised in this research poster I created to display at the Laidlaw conference we attended last year:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/research_poster.png&quot; alt=&quot;research poster&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see in the top right a more polished version of the graphic inspired by Sondra Ekland’s jumper, and along the bottom three images exploring different aspects of the type of divisibility visualisation I described before. In the middle of the poster is my attempt to to explain how my proposed program would go about creating these graphics in a general sense.&lt;/p&gt;

&lt;p&gt;The totality of impact and value that summer had cannot really be described, not in a poster or a blog post. I learned a lot, even if I didn’t make a shiny program.&lt;/p&gt;

&lt;p&gt;Regardless, it’s a two year program where a bit of failure (maybe even a lot!) is expected, understood, and appropriately provisioned for. All the better to prepare for the second year. So, the second year - what to do?&lt;/p&gt;

&lt;h2 id=&quot;the-second-year&quot;&gt;The Second Year&lt;/h2&gt;

&lt;p&gt;The Laidlaw programme runs internationally at a number of research institutions. There is drive to enable international research collaboration among institutions and scholars. I found the prospect of researching at a different university, and experiencing life elsewhere at the same time very appealing so I looked into my options. The project has been very much self defined and self driven so there was not a clear blueprint for collaboration. My approach was to first find people I wanted to work with by combing through the associated uni’s mathematics and computer science faculty for researchers with overlapping interests - then if they were willing to talk to me we would figure out the details as needed.&lt;/p&gt;

&lt;p&gt;Without any leads in particular to follow, first I reached out to &lt;a href=&quot;http://www.cs.toronto.edu/~david/index.html&quot;&gt;David Liu&lt;/a&gt; from Toronto university. Communication was like croquet, passing messages through the appropriate wickets of administration. I was fortunate to have the support of the scholarship to enable communication whatsoever. When a message weaved its way back to me the game was up - David was intrigued, but unfortunately not available to work together over the proposed time period.&lt;/p&gt;

&lt;p&gt;It didn’t seem wise to force the project to be collaborative if the proper impetus wasn’t there, so I was hesitant to contact just anybody. Fortunately, shortly after hearing the bad news about Toronto the Laidlaw team here at York caught word that Hong Kong university was particular keen to cross pollinate scholars in the future. With this new information, I again trawled the faculty pages and found a professor I must have missed first time round, because his research areas fit my project direction incredibly well. This time I was told I could contact the academic directly, so I composed an email to &lt;a href=&quot;http://www.cs.hku.hk/research/profile.jsp?teacher=wenping&quot;&gt;Professor Wenping Wang&lt;/a&gt; explaining my plans, attaching my research poster and copying in the relevant people - and I heard back the same evening! He was interested in collaborating.&lt;/p&gt;

&lt;p&gt;The plans we made (what I will be doing now I’m here) will be outlined in the second part of this blog!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;It turns out the latter is much harder than the former. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Joel Strouts</name></author><summary type="html">For the next two months I am working in Hong Kong. While I’m here I think it would be helpful to document my time and the work I’m doing. So that those posts are not completely without context, I will take the next two posts to explain: First - Who I am and how I got here, and second - a proper exposition of the problem I will (at least initially) be working on while I’m here.</summary></entry><entry><title type="html">Scratch</title><link href="https://joelstrouts.com/2000/01/01/Scratch.html" rel="alternate" type="text/html" title="Scratch" /><published>2000-01-01T00:00:00+00:00</published><updated>2000-01-01T00:00:00+00:00</updated><id>https://joelstrouts.com/2000/01/01/Scratch</id><content type="html" xml:base="https://joelstrouts.com/2000/01/01/Scratch.html">&lt;!-- 
  TODO:
  - add final slide with interactive options for controlling
  all parameters
  - add feature to reveal report on previously loaded system of
  equations on hover
  - make resolution not depend on computed width, more pixels can suuurely fit on the screen damnit!
--&gt;
&lt;!-- contains the whole bit to be embedded in the page --&gt;
&lt;div style=&quot;background-color: #f5f5f5; padding: 20px; border-radius: 2.1rem; border: 1px solid #4141ff&quot;&gt;
  &lt;!-- contains the visualisations --&gt;
  &lt;div id=&quot;canvas-container&quot; hidden=&quot;true&quot; style=&quot;margin-bottom: 0.5rem&quot;&gt;
  &lt;/div&gt;
  &lt;!-- contains report on last generation --&gt;
  &lt;div id=&quot;report&quot;&gt;&lt;/div&gt;
  &lt;!-- contains the buttons --&gt;
  &lt;div id=&quot;presets&quot;&gt;
    &lt;input style=&quot;background-color: #ddd&quot; type=&quot;button&quot; value=&quot;Binary Tree&quot; alt=&quot;binaryTree&quot; /&gt;
    &lt;input style=&quot;background-color: #ddd&quot; type=&quot;button&quot; value=&quot;Serpinski&quot; alt=&quot;serpinski&quot; /&gt;
    &lt;input style=&quot;background-color: #ddd&quot; type=&quot;button&quot; value=&quot;Sand Dollar&quot; alt=&quot;sandDollar&quot; /&gt;
    &lt;input style=&quot;background-color: #ddd&quot; type=&quot;button&quot; value=&quot;Maple Leaf&quot; alt=&quot;mapleLeaf&quot; /&gt;
    &lt;input style=&quot;background-color: #ddd&quot; type=&quot;button&quot; value=&quot;Barnsley Fern&quot; alt=&quot;barnsleyFern&quot; /&gt;
    &lt;input style=&quot;background-color: #ddd&quot; type=&quot;button&quot; value=&quot;Random&quot; alt=&quot;random&quot; /&gt;
  &lt;/div&gt;
  &lt;div id=&quot;lock-box&quot; style=&quot;visibility: hidden;&quot;&gt;
    &lt;input id=&quot;check-box&quot; type=&quot;checkbox&quot; value=&quot;Keep current random transformation&quot; checked=&quot;&quot; /&gt; Lock current transformation (rather than generating a new pattern each time)
  &lt;/div&gt;
  &lt;!-- contains the textual desctiption --&gt;
  &lt;h4 id=&quot;frame-title&quot;&gt;↑ Choose an image to generate ↑&lt;/h4&gt;
  &lt;div id=&quot;slide-controls&quot; hidden=&quot;true&quot;&gt;
    &lt;input style=&quot;background-color: #ddd&quot; type=&quot;button&quot; value=&quot;previous slide&quot; id=&quot;previous-button&quot; /&gt;
    &lt;input style=&quot;background-color: #ddd&quot; type=&quot;button&quot; value=&quot;next slide&quot; id=&quot;next-button&quot; /&gt;
  &lt;/div&gt;
  &lt;div id=&quot;frame-description-container&quot;&gt;
  &lt;p style=&quot;padding: 0.5rem 1rem; border-top: 1px solid #333333; font-size: 1.1em;&quot; id=&quot;frame-description&quot;&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;!-- all the logic/ content to include in that scaffold --&gt;

&lt;!-- data to be interacted with --&gt;
&lt;script&gt;
  let frames = [
    { // 0
      title:
      &quot;The final result of the image generation process.&quot;,
      description: () =&gt;
      &quot;The image you've just generated is entirely determined the following set of equations:&quot; + IFS.latex + &quot;but how? How exactly are these functions used to generate the above image? That is what we are going to examine.&quot;,
      options: {},
      imageData: () =&gt; IFS.get(eval(preset), 250000, frames[0].options),
    },
    { // I
      title:
      &quot;I. The initial starting point&quot;,
      description: () =&gt; 
      &quot;Yes, the image is generated from a handful (three, four, more perhaps) functions. What are these functions though? You can think of each function as representing a system of rules which tell you how to move points around. That is, if I have a point located in the top right of the image, where should I move it to? how about if it was in the top left?&lt;br&gt;&lt;br&gt; Each function is a different set of rules describing exactly where each point should end up depending on where it started. That is why the first step in the image-generation process is to draw just one point. It is our first point. In the next step we will use the position of that first point to figure out where the second point should go, according to one of the functions.&quot;,
      options: {style: 'blobs', blobsSize: 3},
      imageData: () =&gt; IFS.get(eval(preset), 0, frames[1].options),
    },
    { // II
      title:
      &quot;II. The very first iteration&quot;,
      description: () =&gt;
      &quot;This is the very core process. The initial position, marked in red, was fed into one of the functions and the new position (as determined by the function) was spat out - the new position now marked in black. But hang on, which function? There was more than one function in the definition, and if each one is a different set of rules - how was it decided which rules got used? Well that's the funny part of the algorithm - it was chosen at random. At each step in the process the function which is used gets selected randomly from the handful given in the beginning. Recall that our functions are given by:&quot; + IFS.latex + &quot;In thise case the &lt;i&gt;particular&lt;/i&gt; function which decided where the black point went in &lt;i&gt;this&lt;/i&gt; iteration was: $f_{&quot; + (IFS.lastTransform + 1) +&quot;(\\mathbf{x})}$. If you want to see what would have happened if a different set of rules was applied, click on the image to regenerate it and the function will be randomised again! &lt;br&gt;&lt;br&gt; Note: Although the functions are chosen at random, some are chosen more often than others (so if you've regenerated the image a few times and got the same one each time that's probably why).&quot;,
      options: {style: 'lines', blobsSize: 3},
      imageData: () =&gt; IFS.get(eval(preset), 1, frames[2].options),
    },
    { // III
      title:
      &quot;III. One more step, now with colour!&quot;,
      description: () =&gt; 
      &quot;Picking up from where we left off, we choose another function at random. This time instead of moving the starting point like before, we work with the most recent position, after the last function was applied. The result is three dots, one where we started, one after the first (randomly chosen) function was applied, and then the last one after the new (also randomly chosen) function was used. We draw a line following the path made by our point. &lt;br&gt;&lt;br&gt;For a little more clarity we have coloured the lines tracing each movement from one position to the next. The colour of each line should correspond with the colour of one of our functions shown here:&quot; + IFS.latex,
      options: {style: 'lines', color: 'last', blobsSize: 3},
      imageData: () =&gt; IFS.get(eval(preset), 2, frames[3].options),
      // function call:
      // IFS.get(eval(preset), 5, {style: 'lines', color: 'last'});
    },
    { // IV
      title:
      &quot;IV. 50 Steps in, some patterns emerge.&quot;,
      description: () =&gt;
      &quot;So now you get how it works - we choose a function at random, use it to calculate a new position based on the last one, then colour the path in-between according to which function was used. &lt;br&gt;&lt;br&gt; Now you know how the process works, we can start cranking up the number of steps! Here we've done fifty steps, and the path is definitely random, but there's some order too. The same sorts of arcs traced out over and over. What do you think it will look like when we do even more?&lt;br&gt;&lt;br&gt; The functions, for reference:&quot; + IFS.latex,
      options: {style: 'lines', color: 'last', blobsSize: 3},
      imageData: () =&gt; IFS.get(eval(preset), 50, frames[4].options),
      // function call:
      // IFS.get(eval(preset), 10-1000, {style: 'lines', color: 'last'});
    },
    { // V
      title:
      &quot;V. The output after 2000 of these random jumps&quot;,
      description: () =&gt;
      &quot;Pretty tangled! Is it what you expected? I've reduced the size of the blobs left at each stopping point so they are just little dots, that way you can see the lines better. The outline of the shape has been completely traced now, and as for what's going on in the middle - something interesting! While the lines are very helpful for visualising the process, they are of course absent from the final image so in the next step we will be removing them. &lt;br&gt;&lt;br&gt; The functions, for reference:&quot; + IFS.latex,
      options: {style: 'lines', color: 'last', blobsSize: 0},
      imageData: () =&gt; IFS.get(eval(preset), 2000, frames[5].options),
      // function call:
      // IFS.get(eval(preset), 10,0000, {style: 'lines', color: 'last'});
    },
    { // VI
      title:
      &quot;VI. What you see when you remove all the connecting lines&quot;,
      description: () =&gt;
      &quot;You should just be able to make out the final form now, but a bit faint perhaps - turns out that with the lines removed 2000 iterations doesn't seem like so many after all. Note: when we removed the lines, we kept colour on the points - that is to say: each point is coloured according to which function was responsible for moving it to its current position from whichever position came before.&lt;br&gt;&lt;br&gt; The functions, for reference:&quot; + IFS.latex,
      options: {color: 'last'},
      imageData: () =&gt; IFS.get(eval(preset), 2000, frames[6].options),
    },
    { // VII
      title:
      &quot;VII. From 2,000 to 100,000&quot;,
      description: () =&gt;
      &quot;The image is revealed! At this point the main work is done, the core process is not so complex actually. Of course, this image has colour and the original didn't, but it's for pedagogical purposes! I don't know about you, but when I first saw the pattern coloured like this, I was quite surprised. Something caught me off guard about how the colours segregate themselves into clearly defined regions like that. I think I expected them to be messier and mixed together more. (that does happen to be the case for some of the randomly generated IFSs however). You can see how different regions in the image correspond to specific functions from the definition. &lt;br&gt;&lt;br&gt;The functions, for reference:&quot; + IFS.latex,
      options: {color: 'last'},
      imageData: () =&gt; IFS.get(eval(preset), 100000, frames[7].options),
    },
    { // VIII
      title:
      &quot;VIII. Superimposing the bounding boxes to indicate the different rules&quot;,
      description: () =&gt;
      &quot;To make that relationship (hopefully) even clearer, I've drawn a coloured box for each function which is supposed to give some indication of what it's really doing, let me explain what they mean: Look at the largest box, the black one. Now choose one of the coloured ones, and compare what you see in the big black box to the contents of the smaller, warped, coloured box. The contents of the smaller box should be a small copy of what was in the larger box! That's how the functions really work, you can describe their effect by drawing input/output boxes like this because they keep everything which is within and without in proportion to the change in shape and position of the box. Changing the numbers in the functions essentially correspons to changing the coordinates of these output boxes. &lt;br&gt;&lt;br&gt;The functions, for reference:&quot; + IFS.latex,
      options: {color: 'last', bboxes: true},
      imageData: () =&gt; IFS.get(eval(preset), 100000, frames[8].options),
    },
    { // IX
      title:
      &quot;IX. Ending where we started&quot;,
      description: () =&gt;
      &quot;Removing the colours and the boxes, and adding a few more iterations (now 250,000), we're back where we started. Now you know why the points seem to dance about just slightly every time the image is regenerated - because the randomness in the procedure makes each image unique, yet still they each reveal the same underlying pattern. I hope you found this exposition both interesting and clear! &quot;,
      options: {color: 'uniform'},
      imageData: () =&gt; IFS.get(eval(preset), 250000, frames[9].options),
    },
  ];
&lt;/script&gt;

&lt;!-- interaction handling --&gt;
&lt;script&gt;
  // functions
  // events / content
  let slideNum = 0;
  let preset = 'binaryTree';
  let lockBox = document.getElementById('lock-box');
  let presets = [...document.getElementById('presets').childNodes];
  let loadPreset = (e) =&gt; {
    preset = e.target.alt;
    getFrame(frames[slideNum]);
  }
  for (index in presets) {
    if(presets[index].nodeName == 'INPUT') {
      presets[index].onclick = (e) =&gt; {
        for(indexB in presets) {
            presets[indexB].style = &quot;background-color: #ddd; font-weight: lighter;&quot;
        }
        e.target.style = &quot;background-color: #ddd; font-weight: heavier;&quot;
        preset = e.target.alt;
        console.log(preset);
        if (preset == 'random') {
         lockBox.style = &quot;visibility: visible;&quot;;
        } else {
         lockBox.style = &quot;visibility: hidden;&quot;;
        }
        getFrame(frames[slideNum]);
      };
    }
  }
  let frameDescriptionContainer = document.getElementsByName('frame-description-container');
  let nextButton = document.getElementById('next-button');
  let prevButton = document.getElementById('previous-button');
  let frameDescription = document.getElementById('frame-description');
  let frameTitle = document.getElementById('frame-title');
  let checkBox = document.getElementById('check-box');
  let frameCanvas;
  let frameContext;
  let slideControls = document.getElementById('slide-controls');
  let canvasContainer = document.getElementById('canvas-container');
  let options = 
  nextButton.onclick = () =&gt; { 
    slideNum = (slideNum + 1 + 10) % 10;
    getFrame(frames[slideNum]);
  };
  prevButton.onclick = () =&gt; { 
    slideNum = (slideNum - 1 + 10) % 10;
    getFrame(frames[slideNum]);
  };
  const getFrame = (frame) =&gt; {
    if (canvasContainer.hidden == true) {
      canvasContainer.hidden = false;
      frameCanvas = document.createElement('canvas');
      canvasContainer.appendChild(frameCanvas);
      let containerWidth = canvasContainer.offsetWidth;
      if (canvasContainer.offsetWidth &lt; 490) {
        MathJax.Hub.Config({
          CommonHTML: {
            scale: 50
          }
        });
      }
      frameCanvas.style = &quot;margin-right:auto; margin-left:auto; display:block;&quot;
      frameCanvas.width = containerWidth;
      frameCanvas.height = containerWidth;
      frameCanvas.id = &quot;frame-canvas&quot;
      frameCanvas.onclick = () =&gt; {
        if (checkBox.checked) { 
          frames[slideNum].options.new = false;
        } else {
          frames[slideNum].options.new = true;
        }
        paint(frameCanvas, frames[slideNum].imageData())
        frameDescription.innerHTML = frames[slideNum].description();
        MathJax.Hub.Queue([&quot;Typeset&quot;,MathJax.Hub]);
      };
    }
    slideControls.hidden = false;
    frameTitle.innerHTML = frame.title;
    if (preset == &quot;random&quot; || preset == &quot;mapleLeaf&quot;) {
      IFS.defaultOptions.scale = 0.7;
    } else if (preset == &quot;binaryTree&quot;) {
      IFS.defaultOptions.scale = 0.8;
    } else {
      IFS.defaultOptions.scale = 0.9;
    }
    if (checkBox.checked) { 
      frame.options.new = false;
    } else {
      frame.options.new = true;
    }
    paint(frameCanvas, frame.imageData());
    frameDescription.innerHTML = frame.description();
    MathJax.Hub.Queue([&quot;Typeset&quot;,MathJax.Hub]);
  }
&lt;/script&gt;

&lt;p&gt;&lt;input type=&quot;button&quot; id=&quot;download-prep-button&quot; value=&quot;prepare download&quot; /&gt;
&lt;br /&gt;
&lt;a id=&quot;download-link&quot; hidden=&quot;true&quot;&gt;
  Download
&lt;/a&gt;&lt;/p&gt;

&lt;script&gt;
  let downloadPrepButton = document.getElementById('download-prep-button');
  let downloadLink = document.getElementById('download-link');
  downloadPrepButton.onclick = () =&gt; {
    let canvas = document.getElementById('frame-canvas');
    let imageHREF = CanvasToBMP.toDataURL(canvas);
    downloadLink.href = imageHREF;
    window.location = imageHREF;
    // downloadLink.download = &quot;IFS-image.bmp&quot;
    // downloadLink.hidden = false;
  }
&lt;/script&gt;</content><author><name>Joel Strouts</name></author><summary type="html">Lock current transformation (rather than generating a new pattern each time) ↑ Choose an image to generate ↑ Download</summary></entry></feed>